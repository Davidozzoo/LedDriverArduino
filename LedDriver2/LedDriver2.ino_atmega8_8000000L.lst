
C:\Users\user\AppData\Local\Temp\arduino_build_625081/LedDriver2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	69 c0       	rjmp	.+210    	; 0xd6 <__bad_interrupt>
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	67 c0       	rjmp	.+206    	; 0xd6 <__bad_interrupt>
       8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
       a:	65 c0       	rjmp	.+202    	; 0xd6 <__bad_interrupt>
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	63 c0       	rjmp	.+198    	; 0xd6 <__bad_interrupt>
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	2e c5       	rjmp	.+2652   	; 0xa70 <__vector_9>
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	5f c0       	rjmp	.+190    	; 0xd6 <__bad_interrupt>
      18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
      1a:	5d c0       	rjmp	.+186    	; 0xd6 <__bad_interrupt>
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	5b c0       	rjmp	.+182    	; 0xd6 <__bad_interrupt>
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	59 c0       	rjmp	.+178    	; 0xd6 <__bad_interrupt>
      24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	00 00       	nop
      28:	00 00       	nop
      2a:	38 00       	.word	0x0038	; ????
      2c:	35 00       	.word	0x0035	; ????
      2e:	32 00       	.word	0x0032	; ????

00000030 <port_to_mode_PGM>:
      30:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000003a <port_to_input_PGM>:
      3a:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000044 <digital_pin_to_port_PGM>:
      44:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      54:	03 03 03 03 02 02 03                                .......

0000005b <digital_pin_to_bit_mask_PGM>:
      5b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      6b:	04 08 10 20 40 80 40                                ... @.@

00000072 <digital_pin_to_timer_PGM>:
	...
      7a:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000008a <__ctors_start>:
__ctors_start():
      8a:	d7 0b       	sbc	r29, r23

0000008c <__ctors_end>:
__dtors_end():
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      98:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      9a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      9c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      9e:	ee e4       	ldi	r30, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      a0:	fa e1       	ldi	r31, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      a4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      a6:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      a8:	a0 3a       	cpi	r26, 0xA0	; 160
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      aa:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ae:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      b0:	a0 ea       	ldi	r26, 0xA0	; 160
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      b2:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      b8:	a6 33       	cpi	r26, 0x36	; 54
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      ba:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>

000000be <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      be:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      c0:	c6 e4       	ldi	r28, 0x46	; 70
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      c2:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      c4:	03 c0       	rjmp	.+6      	; 0xcc <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      c6:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      c8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ca:	b5 dc       	rcall	.-1686   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      cc:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      ce:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      d0:	d1 f7       	brne	.-12     	; 0xc6 <__do_global_ctors+0x8>
      d2:	18 d5       	rcall	.+2608   	; 0xb04 <main>
      d4:	ba cc       	rjmp	.-1676   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>

000000d6 <__bad_interrupt>:
__vector_1():
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <digitalRead.constprop.10>:
digitalRead.constprop.10():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
      d8:	e0 e8       	ldi	r30, 0x80	; 128
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	84 91       	lpm	r24, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
      de:	e9 e6       	ldi	r30, 0x69	; 105
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	94 91       	lpm	r25, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
      e4:	e2 e5       	ldi	r30, 0x52	; 82
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	e4 91       	lpm	r30, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
      ea:	ee 23       	and	r30, r30
      ec:	01 f1       	breq	.+64     	; 0x12e <digitalRead.constprop.10+0x56>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
      ee:	88 23       	and	r24, r24
      f0:	49 f0       	breq	.+18     	; 0x104 <digitalRead.constprop.10+0x2c>
turnOffPWM():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
      f2:	85 30       	cpi	r24, 0x05	; 5
      f4:	a9 f0       	breq	.+42     	; 0x120 <digitalRead.constprop.10+0x48>
      f6:	87 30       	cpi	r24, 0x07	; 7
      f8:	b1 f0       	breq	.+44     	; 0x126 <digitalRead.constprop.10+0x4e>
      fa:	84 30       	cpi	r24, 0x04	; 4
      fc:	19 f4       	brne	.+6      	; 0x104 <digitalRead.constprop.10+0x2c>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     102:	8f bd       	out	0x2f, r24	; 47
digitalRead.constprop.10():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:226

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	e6 5c       	subi	r30, 0xC6	; 198
     10c:	ff 4f       	sbci	r31, 0xFF	; 255
     10e:	a5 91       	lpm	r26, Z+
     110:	b4 91       	lpm	r27, Z
     112:	ec 91       	ld	r30, X
     114:	e9 23       	and	r30, r25
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	59 f4       	brne	.+22     	; 0x132 <digitalRead.constprop.10+0x5a>
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	08 95       	ret
turnOffPWM():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     120:	8f b5       	in	r24, 0x2f	; 47
     122:	8f 7d       	andi	r24, 0xDF	; 223
     124:	ee cf       	rjmp	.-36     	; 0x102 <digitalRead.constprop.10+0x2a>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     126:	85 b5       	in	r24, 0x25	; 37
     128:	8f 7d       	andi	r24, 0xDF	; 223
     12a:	85 bd       	out	0x25, r24	; 37
     12c:	eb cf       	rjmp	.-42     	; 0x104 <digitalRead.constprop.10+0x2c>
digitalRead.constprop.10():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:228
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
  return LOW;
}
     132:	08 95       	ret

00000134 <ClocklessController<(unsigned char)11, 2, 5, 3, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
_ZNK19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE17getMaxRefreshRateEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:117
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
	}

	virtual uint16_t getMaxRefreshRate() const { return 400; }
     134:	80 e9       	ldi	r24, 0x90	; 144
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	08 95       	ret

0000013a <micros>:
micros():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     13a:	3f b7       	in	r19, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     13c:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     13e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <timer0_overflow_count>
     142:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <timer0_overflow_count+0x1>
     146:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <timer0_overflow_count+0x2>
     14a:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <timer0_overflow_count+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     14e:	22 b7       	in	r18, 0x32	; 50
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     150:	08 b6       	in	r0, 0x38	; 56
     152:	00 fe       	sbrs	r0, 0
     154:	05 c0       	rjmp	.+10     	; 0x160 <micros+0x26>
     156:	2f 3f       	cpi	r18, 0xFF	; 255
     158:	19 f0       	breq	.+6      	; 0x160 <micros+0x26>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	a1 1d       	adc	r26, r1
     15e:	b1 1d       	adc	r27, r1
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     160:	3f bf       	out	0x3f, r19	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     162:	ba 2f       	mov	r27, r26
     164:	a9 2f       	mov	r26, r25
     166:	98 2f       	mov	r25, r24
     168:	88 27       	eor	r24, r24
     16a:	bc 01       	movw	r22, r24
     16c:	cd 01       	movw	r24, r26
     16e:	62 0f       	add	r22, r18
     170:	71 1d       	adc	r23, r1
     172:	81 1d       	adc	r24, r1
     174:	91 1d       	adc	r25, r1
     176:	43 e0       	ldi	r20, 0x03	; 3
     178:	66 0f       	add	r22, r22
     17a:	77 1f       	adc	r23, r23
     17c:	88 1f       	adc	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	4a 95       	dec	r20
     182:	d1 f7       	brne	.-12     	; 0x178 <micros+0x3e>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     184:	08 95       	ret

00000186 <CFastLED::show() [clone .constprop.13]>:
_ZN8CFastLED4showEv.constprop.13():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:573
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale the brightness value to use in place of the stored value
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     186:	4f 92       	push	r4
     188:	5f 92       	push	r5
     18a:	6f 92       	push	r6
     18c:	7f 92       	push	r7
     18e:	9f 92       	push	r9
     190:	af 92       	push	r10
     192:	bf 92       	push	r11
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <CFastLED::show() [clone .constprop.13]+0x20>
     1a6:	1f 92       	push	r1
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <FastLED>
show():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:56
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
     1b0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <FastLED+0x3>
     1b4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <FastLED+0x4>
     1b8:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <FastLED+0x5>
     1bc:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <FastLED+0x6>
     1c0:	89 2b       	or	r24, r25
     1c2:	8a 2b       	or	r24, r26
     1c4:	8b 2b       	or	r24, r27
     1c6:	d1 f0       	breq	.+52     	; 0x1fc <CFastLED::show() [clone .constprop.13]+0x76>
     1c8:	b8 df       	rcall	.-144    	; 0x13a <micros>
     1ca:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <lastshow>
     1ce:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <lastshow+0x1>
     1d2:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <lastshow+0x2>
     1d6:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <lastshow+0x3>
     1da:	60 1b       	sub	r22, r16
     1dc:	71 0b       	sbc	r23, r17
     1de:	82 0b       	sbc	r24, r18
     1e0:	93 0b       	sbc	r25, r19
     1e2:	00 91 2c 01 	lds	r16, 0x012C	; 0x80012c <FastLED+0x3>
     1e6:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <FastLED+0x4>
     1ea:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <FastLED+0x5>
     1ee:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <FastLED+0x6>
     1f2:	60 17       	cp	r22, r16
     1f4:	71 07       	cpc	r23, r17
     1f6:	82 07       	cpc	r24, r18
     1f8:	93 07       	cpc	r25, r19
     1fa:	d0 f2       	brcs	.-76     	; 0x1b0 <CFastLED::show() [clone .constprop.13]+0x2a>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:57
	lastshow = micros();
     1fc:	9e df       	rcall	.-196    	; 0x13a <micros>
     1fe:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <lastshow>
     202:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <lastshow+0x1>
     206:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lastshow+0x2>
     20a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <lastshow+0x3>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:60

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
     20e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <FastLED+0xb>
     212:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <FastLED+0xc>
     216:	30 97       	sbiw	r30, 0x00	; 0
     218:	59 f0       	breq	.+22     	; 0x230 <CFastLED::show() [clone .constprop.13]+0xaa>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:61
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
     21a:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <FastLED+0x7>
     21e:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <FastLED+0x8>
     222:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <FastLED+0x9>
     226:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <FastLED+0xa>
     22a:	8d 2d       	mov	r24, r13
     22c:	09 95       	icall
     22e:	d8 2e       	mov	r13, r24
_ZN14CLEDController4headEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:141
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// Get the first LED controller in the linked list of controllers
    /// @returns CLEDController::m_pHead
    static CLEDController *head() { return m_pHead; }
     230:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <CLEDController::m_pHead>
     234:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <CLEDController::m_pHead+0x1>
computeAdjustment():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:236
              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; ++i) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     238:	4d 2c       	mov	r4, r13
     23a:	51 2c       	mov	r5, r1
     23c:	71 2c       	mov	r7, r1
     23e:	61 2c       	mov	r6, r1
show():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:65
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
     240:	e1 14       	cp	r14, r1
     242:	f1 04       	cpc	r15, r1
     244:	09 f4       	brne	.+2      	; 0x248 <CFastLED::show() [clone .constprop.13]+0xc2>
     246:	57 c0       	rjmp	.+174    	; 0x2f6 <CFastLED::show() [clone .constprop.13]+0x170>
     248:	d7 01       	movw	r26, r14
     24a:	1c 96       	adiw	r26, 0x0c	; 12
     24c:	cc 90       	ld	r12, X
     24e:	1c 97       	sbiw	r26, 0x0c	; 12
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:67
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
     250:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FastLED+0x1>
     254:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <FastLED+0x2>
     258:	84 36       	cpi	r24, 0x64	; 100
     25a:	91 05       	cpc	r25, r1
     25c:	10 f4       	brcc	.+4      	; 0x262 <CFastLED::show() [clone .constprop.13]+0xdc>
_ZN14CLEDController9setDitherEh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:183
    CRGB &operator[](int x) { return m_Data[x]; }

    /// Set the dithering mode for this controller to use
    /// @param ditherMode the dithering mode to set
    /// @returns a reference to the controller
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
     25e:	1c 96       	adiw	r26, 0x0c	; 12
     260:	1c 92       	st	X, r1
showLeds():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:127

    /// Write the data to the LEDs managed by this controller
    /// @param brightness the brightness of the LEDs
    /// @see show(const struct CRGB*, int, uint8_t)
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
     262:	d7 01       	movw	r26, r14
     264:	ed 91       	ld	r30, X+
     266:	fc 91       	ld	r31, X
     268:	a2 80       	ldd	r10, Z+2	; 0x02
     26a:	b3 80       	ldd	r11, Z+3	; 0x03
_ZN4CRGBC2Ehhh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:169
    /// Allow construction from red, green, and blue
    /// @param ir input red value
    /// @param ig input green value
    /// @param ib input blue value
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	1a 82       	std	Y+2, r1	; 0x02
     270:	1b 82       	std	Y+3, r1	; 0x03
computeAdjustment():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:231
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
     272:	dd 20       	and	r13, r13
     274:	69 f1       	breq	.+90     	; 0x2d0 <CFastLED::show() [clone .constprop.13]+0x14a>
     276:	f7 01       	movw	r30, r14
     278:	36 96       	adiw	r30, 0x06	; 6
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:233
                  for(uint8_t i = 0; i < 3; ++i) {
                      uint8_t cc = colorCorrection.raw[i];
     27e:	21 91       	ld	r18, Z+
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:235
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
     280:	22 23       	and	r18, r18
     282:	09 f1       	breq	.+66     	; 0x2c6 <CFastLED::show() [clone .constprop.13]+0x140>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:234
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; ++i) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
     284:	92 80       	ldd	r9, Z+2	; 0x02
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:235
                      if(cc > 0 && ct > 0) {
     286:	99 20       	and	r9, r9
     288:	f1 f0       	breq	.+60     	; 0x2c6 <CFastLED::show() [clone .constprop.13]+0x140>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:236
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	2f 5f       	subi	r18, 0xFF	; 255
     292:	3f 4f       	sbci	r19, 0xFF	; 255
     294:	4f 4f       	sbci	r20, 0xFF	; 255
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	c3 01       	movw	r24, r6
     29a:	b2 01       	movw	r22, r4
     29c:	90 db       	rcall	.-2272   	; 0xfffff9be <__eeprom_end+0xff7ef9be>
     29e:	9b 01       	movw	r18, r22
     2a0:	ac 01       	movw	r20, r24
     2a2:	89 2d       	mov	r24, r9
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	bc 01       	movw	r22, r24
     2ac:	cd 01       	movw	r24, r26
     2ae:	6f 5f       	subi	r22, 0xFF	; 255
     2b0:	7f 4f       	sbci	r23, 0xFF	; 255
     2b2:	8f 4f       	sbci	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	83 db       	rcall	.-2298   	; 0xfffff9be <__eeprom_end+0xff7ef9be>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:238
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
     2b8:	a1 e0       	ldi	r26, 0x01	; 1
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	ac 0f       	add	r26, r28
     2be:	bd 1f       	adc	r27, r29
     2c0:	a0 0f       	add	r26, r16
     2c2:	b1 1f       	adc	r27, r17
     2c4:	8c 93       	st	X, r24
     2c6:	0f 5f       	subi	r16, 0xFF	; 255
     2c8:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:232
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; ++i) {
     2ca:	03 30       	cpi	r16, 0x03	; 3
     2cc:	11 05       	cpc	r17, r1
     2ce:	b9 f6       	brne	.-82     	; 0x27e <CFastLED::show() [clone .constprop.13]+0xf8>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:243
                          adj.raw[i] = work & 0xFF;
                      }
                  }
              }

              return adj;
     2d0:	09 81       	ldd	r16, Y+1	; 0x01
     2d2:	1a 81       	ldd	r17, Y+2	; 0x02
     2d4:	2b 81       	ldd	r18, Y+3	; 0x03
showLeds():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:127

    /// Write the data to the LEDs managed by this controller
    /// @param brightness the brightness of the LEDs
    /// @see show(const struct CRGB*, int, uint8_t)
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
     2d6:	f7 01       	movw	r30, r14
     2d8:	45 85       	ldd	r20, Z+13	; 0x0d
     2da:	56 85       	ldd	r21, Z+14	; 0x0e
     2dc:	62 81       	ldd	r22, Z+2	; 0x02
     2de:	73 81       	ldd	r23, Z+3	; 0x03
     2e0:	c7 01       	movw	r24, r14
     2e2:	f5 01       	movw	r30, r10
     2e4:	09 95       	icall
_ZN14CLEDController9setDitherEh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:183
    CRGB &operator[](int x) { return m_Data[x]; }

    /// Set the dithering mode for this controller to use
    /// @param ditherMode the dithering mode to set
    /// @returns a reference to the controller
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
     2e6:	d7 01       	movw	r26, r14
     2e8:	1c 96       	adiw	r26, 0x0c	; 12
     2ea:	cc 92       	st	X, r12
     2ec:	1c 97       	sbiw	r26, 0x0c	; 12
     2ee:	14 96       	adiw	r26, 0x04	; 4
     2f0:	ed 90       	ld	r14, X+
     2f2:	fc 90       	ld	r15, X
     2f4:	a5 cf       	rjmp	.-182    	; 0x240 <CFastLED::show() [clone .constprop.13]+0xba>
countFPS():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:225

void CFastLED::countFPS(int nFrames) {
	static int br = 0;
	static uint32_t lastframe = 0; // millis();

	if(br++ >= nFrames) {
     2f6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <CFastLED::countFPS(int)::br>
     2fa:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <CFastLED::countFPS(int)::br+0x1>
     2fe:	9c 01       	movw	r18, r24
     300:	2f 5f       	subi	r18, 0xFF	; 255
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <CFastLED::countFPS(int)::br+0x1>
     308:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <CFastLED::countFPS(int)::br>
     30c:	49 97       	sbiw	r24, 0x19	; 25
     30e:	0c f4       	brge	.+2      	; 0x312 <CFastLED::show() [clone .constprop.13]+0x18c>
     310:	49 c0       	rjmp	.+146    	; 0x3a4 <CFastLED::show() [clone .constprop.13]+0x21e>
millis():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     312:	8f b7       	in	r24, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     314:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     316:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <timer0_millis>
     31a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <timer0_millis+0x1>
     31e:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <timer0_millis+0x2>
     322:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <timer0_millis+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     326:	8f bf       	out	0x3f, r24	; 63
countFPS():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:227
		uint32_t now = millis();
		now -= lastframe;
     328:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <CFastLED::countFPS(int)::lastframe>
     32c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <CFastLED::countFPS(int)::lastframe+0x1>
     330:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <CFastLED::countFPS(int)::lastframe+0x2>
     334:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <CFastLED::countFPS(int)::lastframe+0x3>
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	4a 0b       	sbc	r20, r26
     33e:	5b 0b       	sbc	r21, r27
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:228
		if(now == 0) {
     340:	21 f4       	brne	.+8      	; 0x34a <CFastLED::show() [clone .constprop.13]+0x1c4>
_ZN8CFastLED4showEv.constprop.13():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:229
			now = 1; // prevent division by zero below
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
countFPS():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:231
		}
		m_nFPS = (br * 1000) / now;
     34a:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <CFastLED::countFPS(int)::br>
     34e:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <CFastLED::countFPS(int)::br+0x1>
     352:	88 ee       	ldi	r24, 0xE8	; 232
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	e8 9f       	mul	r30, r24
     358:	b0 01       	movw	r22, r0
     35a:	e9 9f       	mul	r30, r25
     35c:	70 0d       	add	r23, r0
     35e:	f8 9f       	mul	r31, r24
     360:	70 0d       	add	r23, r0
     362:	11 24       	eor	r1, r1
     364:	07 2e       	mov	r0, r23
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	fa da       	rcall	.-2572   	; 0xfffff962 <__eeprom_end+0xff7ef962>
     36e:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <FastLED+0x2>
     372:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <FastLED+0x1>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:232
		br = 0;
     376:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <CFastLED::countFPS(int)::br+0x1>
     37a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <CFastLED::countFPS(int)::br>
millis():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     37e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     380:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     382:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <timer0_millis>
     386:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <timer0_millis+0x1>
     38a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <timer0_millis+0x2>
     38e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <timer0_millis+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     392:	2f bf       	out	0x3f, r18	; 63
countFPS():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:233
		lastframe = millis();
     394:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <CFastLED::countFPS(int)::lastframe>
     398:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <CFastLED::countFPS(int)::lastframe+0x1>
     39c:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <CFastLED::countFPS(int)::lastframe+0x2>
     3a0:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <CFastLED::countFPS(int)::lastframe+0x3>
_ZN8CFastLED4showEv.constprop.13():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:573
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	9f 90       	pop	r9
     3c0:	7f 90       	pop	r7
     3c2:	6f 90       	pop	r6
     3c4:	5f 90       	pop	r5
     3c6:	4f 90       	pop	r4
     3c8:	08 95       	ret

000003ca <delay>:
delay():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:396
#endif
#endif // 0
}

void delay(unsigned long ms)
{
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	4b 01       	movw	r8, r22
     3dc:	5c 01       	movw	r10, r24
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     3de:	ad de       	rcall	.-678    	; 0x13a <micros>
     3e0:	6b 01       	movw	r12, r22
     3e2:	7c 01       	movw	r14, r24
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     3e4:	aa de       	rcall	.-684    	; 0x13a <micros>
     3e6:	6c 19       	sub	r22, r12
     3e8:	7d 09       	sbc	r23, r13
     3ea:	8e 09       	sbc	r24, r14
     3ec:	9f 09       	sbc	r25, r15
     3ee:	68 3e       	cpi	r22, 0xE8	; 232
     3f0:	73 40       	sbci	r23, 0x03	; 3
     3f2:	81 05       	cpc	r24, r1
     3f4:	91 05       	cpc	r25, r1
     3f6:	b0 f3       	brcs	.-20     	; 0x3e4 <delay+0x1a>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	82 1a       	sub	r8, r18
     3fc:	91 08       	sbc	r9, r1
     3fe:	a1 08       	sbc	r10, r1
     400:	b1 08       	sbc	r11, r1
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     402:	88 ee       	ldi	r24, 0xE8	; 232
     404:	c8 0e       	add	r12, r24
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	d8 1e       	adc	r13, r24
     40a:	e1 1c       	adc	r14, r1
     40c:	f1 1c       	adc	r15, r1
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     40e:	81 14       	cp	r8, r1
     410:	91 04       	cpc	r9, r1
     412:	a1 04       	cpc	r10, r1
     414:	b1 04       	cpc	r11, r1
     416:	31 f7       	brne	.-52     	; 0x3e4 <delay+0x1a>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	08 95       	ret

0000042a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:372

#endif


        /// Set up the values for binary dithering
        void init_binary_dithering() {
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:376
#if !defined(NO_DITHERING) || (NO_DITHERING != 1)
            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            ++R;
     432:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()::R>
     436:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:381

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     438:	32 2f       	mov	r19, r18
     43a:	37 70       	andi	r19, 0x07	; 7
     43c:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()::R>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:390
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
     440:	20 ff       	sbrs	r18, 0
     442:	2a c0       	rjmp	.+84     	; 0x498 <__stack+0x39>
     444:	20 e8       	ldi	r18, 0x80	; 128
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:391
                if(R & 0x02) { Q |= 0x40; }
     446:	31 fd       	sbrc	r19, 1
     448:	20 64       	ori	r18, 0x40	; 64
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:392
                if(R & 0x04) { Q |= 0x20; }
     44a:	34 70       	andi	r19, 0x04	; 4
     44c:	09 f0       	breq	.+2      	; 0x450 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
     44e:	20 62       	ori	r18, 0x20	; 32
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:405
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     450:	20 5f       	subi	r18, 0xF0	; 240
     452:	fc 01       	movw	r30, r24
     454:	ec 01       	movw	r28, r24
     456:	23 96       	adiw	r28, 0x03	; 3
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:415
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; ++i) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     458:	00 e0       	ldi	r16, 0x00	; 0
     45a:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:414
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; ++i) {
                    uint8_t s = mScale.raw[i];
     45c:	64 85       	ldd	r22, Z+12	; 0x0c
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:415
                    e[i] = s ? (256/s) + 1 : 0;
     45e:	66 23       	and	r22, r22
     460:	21 f0       	breq	.+8      	; 0x46a <__stack+0xb>
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	c8 01       	movw	r24, r16
     466:	ba da       	rcall	.-2700   	; 0xfffff9dc <__eeprom_end+0xff7ef9dc>
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	61 87       	std	Z+9, r22	; 0x09
scale8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:93
        "clr __zero_reg__    \n\t"

        : "+a" (i)      /* writes to i */
        : "a"  (scale)  /* uses scale */
        : "r0", "r1"    /* clobbers r0, r1 */
    );
     46c:	32 2f       	mov	r19, r18
     46e:	36 9f       	mul	r19, r22
     470:	03 0e       	add	r0, r19
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	31 1d       	adc	r19, r1
     476:	11 24       	eor	r1, r1
_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:418
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (--d[i]);
     478:	31 11       	cpse	r19, r1
     47a:	10 c0       	rjmp	.+32     	; 0x49c <__stack+0x3d>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:416

            // Setup the initial D and E values
            for(int i = 0; i < 3; ++i) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
     47c:	16 82       	std	Z+6, r1	; 0x06
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:420
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (--d[i]);
#endif
                    if(e[i]) --e[i];
     47e:	66 23       	and	r22, r22
     480:	11 f0       	breq	.+4      	; 0x486 <__stack+0x27>
     482:	61 50       	subi	r22, 0x01	; 1
     484:	61 87       	std	Z+9, r22	; 0x09
     486:	31 96       	adiw	r30, 0x01	; 1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:413
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; ++i) {
     488:	ec 17       	cp	r30, r28
     48a:	fd 07       	cpc	r31, r29
     48c:	39 f7       	brne	.-50     	; 0x45c <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:423
                    if(d[i]) (--d[i]);
#endif
                    if(e[i]) --e[i];
            }
#endif
        }
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:386
            R &= (0x01 << ditherBits) - 1;

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	d5 cf       	rjmp	.-86     	; 0x446 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:418
            for(int i = 0; i < 3; ++i) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (--d[i]);
     49c:	31 50       	subi	r19, 0x01	; 1
     49e:	36 83       	std	Z+6, r19	; 0x06
     4a0:	ee cf       	rjmp	.-36     	; 0x47e <__stack+0x1f>

000004a2 <ClocklessController<(unsigned char)11, 2, 5, 3, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:120

protected:
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     4a2:	4f 92       	push	r4
     4a4:	5f 92       	push	r5
     4a6:	7f 92       	push	r7
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	2c 01       	movw	r4, r24
     4c2:	eb 01       	movw	r28, r22
wait():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/fastled_delay.h:28

	/// Blocking delay until WAIT time since mark() has passed
	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     4c4:	3a de       	rcall	.-908    	; 0x13a <micros>
     4c6:	f2 01       	movw	r30, r4
     4c8:	27 85       	ldd	r18, Z+15	; 0x0f
     4ca:	30 89       	ldd	r19, Z+16	; 0x10
     4cc:	62 1b       	sub	r22, r18
     4ce:	73 0b       	sbc	r23, r19
C:\Users\user\Documents\Arduino\libraries\FastLED\src/fastled_delay.h:29
		} while(diff < WAIT);
     4d0:	6a 30       	cpi	r22, 0x0A	; 10
     4d2:	71 05       	cpc	r23, r1
     4d4:	b8 f3       	brcs	.-18     	; 0x4c4 <ClocklessController<(unsigned char)11, 2, 5, 3, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x22>
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:123

		mWait.wait();
		cli();
     4d6:	f8 94       	cli
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:125

		if(pixels.mLen > 0) {
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	9b 81       	ldd	r25, Y+3	; 0x03
     4dc:	18 16       	cp	r1, r24
     4de:	19 06       	cpc	r1, r25
     4e0:	0c f0       	brlt	.+2      	; 0x4e4 <ClocklessController<(unsigned char)11, 2, 5, 3, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x42>
     4e2:	40 c1       	rjmp	.+640    	; 0x764 <L_3833>
showRGBInternal():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:361
#define FL_FALLTHROUGH __attribute__ ((fallthrough));

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static void /*__attribute__((optimize("O0")))*/  /*__attribute__ ((always_inline))*/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {
		uint8_t *data = (uint8_t*)pixels.mData;
     4e4:	e8 81       	ld	r30, Y
     4e6:	f9 81       	ldd	r31, Y+1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:367
		data_ptr_t port = FastPin<DATA_PIN>::port();
		data_t mask = FastPin<DATA_PIN>::mask();
		uint8_t scale_base = 0;

		// FASTLED_REGISTER uint8_t *end = data + nLeds;
		data_t hi = *port | mask;
     4e8:	68 b3       	in	r22, 0x18	; 24
     4ea:	86 2e       	mov	r8, r22
     4ec:	68 94       	set
     4ee:	83 f8       	bld	r8, 3
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:368
		data_t lo = *port & ~mask;
     4f0:	38 b3       	in	r19, 0x18	; 24
     4f2:	37 7f       	andi	r19, 0xF7	; 247
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:369
		*port = lo;
     4f4:	38 bb       	out	0x18, r19	; 24
_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE25preStepFirstByteDitheringEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:471
                d[2] = e[2] - d[2];
        }

        /// Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     4f6:	da 84       	ldd	r13, Y+10	; 0x0a
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	2d 2d       	mov	r18, r13
     4fc:	28 1b       	sub	r18, r24
     4fe:	82 2f       	mov	r24, r18
     500:	2f 83       	std	Y+7, r18	; 0x07
_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE9advanceByEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:454
        /// @returns LANES from template
        __attribute__((always_inline)) inline int lanes() { return LANES; }

        /// Get the amount to advance the pointer by
        /// @returns PixelController::mAdvance
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }
     502:	4f 85       	ldd	r20, Y+15	; 0x0f
     504:	04 2e       	mov	r0, r20
     506:	00 0c       	add	r0, r0
     508:	55 0b       	sbc	r21, r21
showRGBInternal():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:383

		// pull the dithering/adjustment values out of the pixels object for direct asm access

		// even though advanceBy is only an int8, we cast it to int16 for sign extension in case it's negative.
		int16_t advanceBy = pixels.advanceBy();
		uint16_t count = pixels.mLen;
     50a:	aa 81       	ldd	r26, Y+2	; 0x02
     50c:	bb 81       	ldd	r27, Y+3	; 0x03
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:385

		uint8_t s0 = pixels.mScale.raw[RO(0)];
     50e:	7d 85       	ldd	r23, Y+13	; 0x0d
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:386
		uint8_t s1 = pixels.mScale.raw[RO(1)];
     510:	fc 84       	ldd	r15, Y+12	; 0x0c
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:387
		uint8_t s2 = pixels.mScale.raw[RO(2)];
     512:	ee 84       	ldd	r14, Y+14	; 0x0e
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:389
#if (FASTLED_SCALE8_FIXED==1)
		s0++; s1++; s2++;
     514:	7f 5f       	subi	r23, 0xFF	; 255
     516:	f3 94       	inc	r15
     518:	e3 94       	inc	r14
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:392
#endif
		uint8_t d0 = pixels.d[RO(0)];
		uint8_t d1 = pixels.d[RO(1)];
     51a:	9e 81       	ldd	r25, Y+6	; 0x06
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:393
		uint8_t d2 = pixels.d[RO(2)];
     51c:	98 84       	ldd	r9, Y+8	; 0x08
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:395
		uint8_t e0 = pixels.e[RO(0)];
		uint8_t e1 = pixels.e[RO(1)];
     51e:	b9 84       	ldd	r11, Y+9	; 0x09
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:396
		uint8_t e2 = pixels.e[RO(2)];
     520:	ab 84       	ldd	r10, Y+11	; 0x0b
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:401

		uint8_t loopvar=0;

		// This has to be done in asm to keep gcc from messing up the asm code further down
		b0 = data[RO(0)];
     522:	11 81       	ldd	r17, Z+1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:403
		{
			LDSCL4(b0,O0) 	PRESCALEA2(d0)
     524:	c1 2c       	mov	r12, r1
     526:	6c 2d       	mov	r22, r12
     528:	0c 2d       	mov	r16, r12
     52a:	2c 2d       	mov	r18, r12
     52c:	21 81       	ldd	r18, Z+1	; 0x01
     52e:	11 27       	eor	r17, r17
     530:	88 94       	clc
     532:	21 11       	cpse	r18, r1
     534:	28 0f       	add	r18, r24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:404
			PRESCALEB4(d0)	SCALE02(b0,0)
     536:	08 f4       	brcc	.+2      	; 0x53a <L_1084>
     538:	2f ef       	ldi	r18, 0xFF	; 255

0000053a <L_1084>:
     53a:	81 95       	neg	r24
     53c:	88 94       	clc
     53e:	70 fd       	sbrc	r23, 0
     540:	12 0f       	add	r17, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:405
			RORSC04(b0,1) 	ROR1(b0) CLC1
     542:	17 95       	ror	r17
     544:	88 94       	clc
     546:	71 fd       	sbrc	r23, 1
     548:	12 0f       	add	r17, r18
     54a:	17 95       	ror	r17
     54c:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:406
			SCROR04(b0,2)		SCALE02(b0,3)
     54e:	72 fd       	sbrc	r23, 2
     550:	12 0f       	add	r17, r18
     552:	17 95       	ror	r17
     554:	88 94       	clc
     556:	73 fd       	sbrc	r23, 3
     558:	12 0f       	add	r17, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:407
			RORSC04(b0,4) 	ROR1(b0) CLC1
     55a:	17 95       	ror	r17
     55c:	88 94       	clc
     55e:	74 fd       	sbrc	r23, 4
     560:	12 0f       	add	r17, r18
     562:	17 95       	ror	r17
     564:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:408
			SCROR04(b0,5) 	SCALE02(b0,6)
     566:	75 fd       	sbrc	r23, 5
     568:	12 0f       	add	r17, r18
     56a:	17 95       	ror	r17
     56c:	88 94       	clc
     56e:	76 fd       	sbrc	r23, 6
     570:	12 0f       	add	r17, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:409
			RORSC04(b0,7) 	ROR1(b0) CLC1
     572:	17 95       	ror	r17
     574:	88 94       	clc
     576:	77 fd       	sbrc	r23, 7
     578:	12 0f       	add	r17, r18
     57a:	17 95       	ror	r17
     57c:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:410
			MOV_ADDDE04(b1,b0,d0,e0)
     57e:	62 2f       	mov	r22, r18
     580:	71 11       	cpse	r23, r1
     582:	61 2f       	mov	r22, r17
     584:	8d 0d       	add	r24, r13
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:411
			MOV1(b0,b1)
     586:	16 2f       	mov	r17, r22
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:418

		{
			// while(--count)
			{
				// Loop beginning
				DNOP;
     588:	00 2c       	mov	r0, r0
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:432
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
     58a:	88 ba       	out	0x18, r8	; 24
     58c:	17 ff       	sbrs	r17, 7
     58e:	38 bb       	out	0x18, r19	; 24
     590:	20 81       	ld	r18, Z
     592:	66 27       	eor	r22, r22
     594:	88 94       	clc
     596:	38 bb       	out	0x18, r19	; 24
     598:	21 11       	cpse	r18, r1
     59a:	29 0f       	add	r18, r25
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:433
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
     59c:	88 ba       	out	0x18, r8	; 24
     59e:	16 ff       	sbrs	r17, 6
     5a0:	38 bb       	out	0x18, r19	; 24
     5a2:	08 f4       	brcc	.+2      	; 0x5a6 <L_1560>
     5a4:	2f ef       	ldi	r18, 0xFF	; 255

000005a6 <L_1560>:
     5a6:	91 95       	neg	r25
     5a8:	88 94       	clc
     5aa:	38 bb       	out	0x18, r19	; 24
     5ac:	f0 fc       	sbrc	r15, 0
     5ae:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:434
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
     5b0:	88 ba       	out	0x18, r8	; 24
     5b2:	15 ff       	sbrs	r17, 5
     5b4:	38 bb       	out	0x18, r19	; 24
     5b6:	67 95       	ror	r22
     5b8:	88 94       	clc
     5ba:	f1 fc       	sbrc	r15, 1
     5bc:	62 0f       	add	r22, r18
     5be:	38 bb       	out	0x18, r19	; 24
     5c0:	67 95       	ror	r22
     5c2:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:435
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
     5c4:	88 ba       	out	0x18, r8	; 24
     5c6:	14 ff       	sbrs	r17, 4
     5c8:	38 bb       	out	0x18, r19	; 24
     5ca:	f2 fc       	sbrc	r15, 2
     5cc:	62 0f       	add	r22, r18
     5ce:	67 95       	ror	r22
     5d0:	88 94       	clc
     5d2:	38 bb       	out	0x18, r19	; 24
     5d4:	f3 fc       	sbrc	r15, 3
     5d6:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:436
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     5d8:	88 ba       	out	0x18, r8	; 24
     5da:	13 ff       	sbrs	r17, 3
     5dc:	38 bb       	out	0x18, r19	; 24
     5de:	67 95       	ror	r22
     5e0:	88 94       	clc
     5e2:	f4 fc       	sbrc	r15, 4
     5e4:	62 0f       	add	r22, r18
     5e6:	38 bb       	out	0x18, r19	; 24
     5e8:	67 95       	ror	r22
     5ea:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:437
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
     5ec:	88 ba       	out	0x18, r8	; 24
     5ee:	12 ff       	sbrs	r17, 2
     5f0:	38 bb       	out	0x18, r19	; 24
     5f2:	f5 fc       	sbrc	r15, 5
     5f4:	62 0f       	add	r22, r18
     5f6:	67 95       	ror	r22
     5f8:	88 94       	clc
     5fa:	38 bb       	out	0x18, r19	; 24
     5fc:	f6 fc       	sbrc	r15, 6
     5fe:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:438
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     600:	88 ba       	out	0x18, r8	; 24
     602:	11 ff       	sbrs	r17, 1
     604:	38 bb       	out	0x18, r19	; 24
     606:	67 95       	ror	r22
     608:	88 94       	clc
     60a:	f7 fc       	sbrc	r15, 7
     60c:	62 0f       	add	r22, r18
     60e:	38 bb       	out	0x18, r19	; 24
     610:	67 95       	ror	r22
     612:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:439
				HI1 _D1(1) QLO2(b0, 0)
     614:	88 ba       	out	0x18, r8	; 24
     616:	10 ff       	sbrs	r17, 0
     618:	38 bb       	out	0x18, r19	; 24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:446
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)
     61a:	12 2f       	mov	r17, r18
     61c:	f1 10       	cpse	r15, r1
     61e:	16 2f       	mov	r17, r22
     620:	9b 0d       	add	r25, r11
     622:	38 bb       	out	0x18, r19	; 24
_Z3_dcILi2EEvRh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:55
template<> __attribute__((always_inline)) inline void _dc< 0>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(FASTLED_REGISTER uint8_t & ) {asm __volatile__("mov r0,r0":::);}
#if defined(__LGT8F__) 
template<> __attribute__((always_inline)) inline void _dc< 2>(FASTLED_REGISTER uint8_t & loopvar) { _dc<1>(loopvar); _dc<1>(loopvar); }
#else
template<> __attribute__((always_inline)) inline void _dc< 2>(FASTLED_REGISTER uint8_t & ) {asm __volatile__("rjmp .+0":::);}
     624:	00 c0       	rjmp	.+0      	; 0x626 <L_1560+0x80>
showRGBInternal():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:448
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
     626:	88 ba       	out	0x18, r8	; 24
     628:	17 ff       	sbrs	r17, 7
     62a:	38 bb       	out	0x18, r19	; 24
     62c:	22 81       	ldd	r18, Z+2	; 0x02
     62e:	66 27       	eor	r22, r22
     630:	88 94       	clc
     632:	38 bb       	out	0x18, r19	; 24
     634:	21 11       	cpse	r18, r1
     636:	29 0d       	add	r18, r9
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:449
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
     638:	88 ba       	out	0x18, r8	; 24
     63a:	16 ff       	sbrs	r17, 6
     63c:	38 bb       	out	0x18, r19	; 24
     63e:	08 f4       	brcc	.+2      	; 0x642 <L_2365>
     640:	2f ef       	ldi	r18, 0xFF	; 255

00000642 <L_2365>:
     642:	e4 0f       	add	r30, r20
     644:	f5 1f       	adc	r31, r21
     646:	38 bb       	out	0x18, r19	; 24
     648:	e0 fc       	sbrc	r14, 0
     64a:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:450
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     64c:	88 ba       	out	0x18, r8	; 24
     64e:	15 ff       	sbrs	r17, 5
     650:	38 bb       	out	0x18, r19	; 24
     652:	67 95       	ror	r22
     654:	88 94       	clc
     656:	e1 fc       	sbrc	r14, 1
     658:	62 0f       	add	r22, r18
     65a:	38 bb       	out	0x18, r19	; 24
     65c:	67 95       	ror	r22
     65e:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:451
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
     660:	88 ba       	out	0x18, r8	; 24
     662:	14 ff       	sbrs	r17, 4
     664:	38 bb       	out	0x18, r19	; 24
     666:	e2 fc       	sbrc	r14, 2
     668:	62 0f       	add	r22, r18
     66a:	67 95       	ror	r22
     66c:	88 94       	clc
     66e:	38 bb       	out	0x18, r19	; 24
     670:	e3 fc       	sbrc	r14, 3
     672:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:452
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     674:	88 ba       	out	0x18, r8	; 24
     676:	13 ff       	sbrs	r17, 3
     678:	38 bb       	out	0x18, r19	; 24
     67a:	67 95       	ror	r22
     67c:	88 94       	clc
     67e:	e4 fc       	sbrc	r14, 4
     680:	62 0f       	add	r22, r18
     682:	38 bb       	out	0x18, r19	; 24
     684:	67 95       	ror	r22
     686:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:453
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
     688:	88 ba       	out	0x18, r8	; 24
     68a:	12 ff       	sbrs	r17, 2
     68c:	38 bb       	out	0x18, r19	; 24
     68e:	e5 fc       	sbrc	r14, 5
     690:	62 0f       	add	r22, r18
     692:	67 95       	ror	r22
     694:	88 94       	clc
     696:	38 bb       	out	0x18, r19	; 24
     698:	e6 fc       	sbrc	r14, 6
     69a:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:454
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     69c:	88 ba       	out	0x18, r8	; 24
     69e:	11 ff       	sbrs	r17, 1
     6a0:	38 bb       	out	0x18, r19	; 24
     6a2:	67 95       	ror	r22
     6a4:	88 94       	clc
     6a6:	e7 fc       	sbrc	r14, 7
     6a8:	62 0f       	add	r22, r18
     6aa:	38 bb       	out	0x18, r19	; 24
     6ac:	67 95       	ror	r22
     6ae:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:455
				HI1 _D1(1) QLO2(b0, 0)
     6b0:	88 ba       	out	0x18, r8	; 24
     6b2:	10 ff       	sbrs	r17, 0
     6b4:	38 bb       	out	0x18, r19	; 24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:466
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
     6b6:	12 2f       	mov	r17, r18
     6b8:	e1 10       	cpse	r14, r1
     6ba:	16 2f       	mov	r17, r22
     6bc:	91 94       	neg	r9
     6be:	38 bb       	out	0x18, r19	; 24
     6c0:	9a 0c       	add	r9, r10
_Z3_dcILi1EEvRh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:51
template<> __attribute__((always_inline)) inline void _dc<-4>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(FASTLED_REGISTER uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(FASTLED_REGISTER uint8_t & ) {asm __volatile__("mov r0,r0":::);}
     6c2:	00 2c       	mov	r0, r0
showRGBInternal():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:467

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
     6c4:	88 ba       	out	0x18, r8	; 24
     6c6:	17 ff       	sbrs	r17, 7
     6c8:	38 bb       	out	0x18, r19	; 24
     6ca:	21 81       	ldd	r18, Z+1	; 0x01
     6cc:	66 27       	eor	r22, r22
     6ce:	88 94       	clc
     6d0:	38 bb       	out	0x18, r19	; 24
     6d2:	21 11       	cpse	r18, r1
     6d4:	28 0f       	add	r18, r24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:468
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
     6d6:	88 ba       	out	0x18, r8	; 24
     6d8:	16 ff       	sbrs	r17, 6
     6da:	38 bb       	out	0x18, r19	; 24
     6dc:	08 f4       	brcc	.+2      	; 0x6e0 <L_3187>
     6de:	2f ef       	ldi	r18, 0xFF	; 255

000006e0 <L_3187>:
     6e0:	81 95       	neg	r24
     6e2:	88 94       	clc
     6e4:	38 bb       	out	0x18, r19	; 24
     6e6:	70 fd       	sbrc	r23, 0
     6e8:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:469
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     6ea:	88 ba       	out	0x18, r8	; 24
     6ec:	15 ff       	sbrs	r17, 5
     6ee:	38 bb       	out	0x18, r19	; 24
     6f0:	67 95       	ror	r22
     6f2:	88 94       	clc
     6f4:	71 fd       	sbrc	r23, 1
     6f6:	62 0f       	add	r22, r18
     6f8:	38 bb       	out	0x18, r19	; 24
     6fa:	67 95       	ror	r22
     6fc:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:470
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
     6fe:	88 ba       	out	0x18, r8	; 24
     700:	14 ff       	sbrs	r17, 4
     702:	38 bb       	out	0x18, r19	; 24
     704:	72 fd       	sbrc	r23, 2
     706:	62 0f       	add	r22, r18
     708:	67 95       	ror	r22
     70a:	88 94       	clc
     70c:	38 bb       	out	0x18, r19	; 24
     70e:	73 fd       	sbrc	r23, 3
     710:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:471
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
     712:	88 ba       	out	0x18, r8	; 24
     714:	13 ff       	sbrs	r17, 3
     716:	38 bb       	out	0x18, r19	; 24
     718:	67 95       	ror	r22
     71a:	88 94       	clc
     71c:	74 fd       	sbrc	r23, 4
     71e:	62 0f       	add	r22, r18
     720:	38 bb       	out	0x18, r19	; 24
     722:	67 95       	ror	r22
     724:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:472
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
     726:	88 ba       	out	0x18, r8	; 24
     728:	12 ff       	sbrs	r17, 2
     72a:	38 bb       	out	0x18, r19	; 24
     72c:	75 fd       	sbrc	r23, 5
     72e:	62 0f       	add	r22, r18
     730:	67 95       	ror	r22
     732:	88 94       	clc
     734:	38 bb       	out	0x18, r19	; 24
     736:	76 fd       	sbrc	r23, 6
     738:	62 0f       	add	r22, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:473
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
     73a:	88 ba       	out	0x18, r8	; 24
     73c:	11 ff       	sbrs	r17, 1
     73e:	38 bb       	out	0x18, r19	; 24
     740:	67 95       	ror	r22
     742:	88 94       	clc
     744:	77 fd       	sbrc	r23, 7
     746:	62 0f       	add	r22, r18
     748:	38 bb       	out	0x18, r19	; 24
     74a:	67 95       	ror	r22
     74c:	88 94       	clc
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:474
				HI1 _D1(1) QLO2(b0, 0)
     74e:	88 ba       	out	0x18, r8	; 24
     750:	10 ff       	sbrs	r17, 0
     752:	38 bb       	out	0x18, r19	; 24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:481
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)  /* fall through */
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) _D2(4) LO1 _D3(5)
     754:	12 2f       	mov	r17, r18
     756:	71 11       	cpse	r23, r1
     758:	16 2f       	mov	r17, r22
     75a:	8d 0d       	add	r24, r13
     75c:	38 bb       	out	0x18, r19	; 24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:482
				ENDLOOP5
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	09 f0       	breq	.+2      	; 0x764 <L_3833>
     762:	13 cf       	rjmp	.-474    	; 0x58a <L_1084+0x50>

00000764 <L_3833>:
_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE4sizeEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:446
            }
        }

        /// Get the length of the LED strip
        /// @returns PixelController::mLen
        __attribute__((always_inline)) inline int size() { return mLen; }
     764:	ea 81       	ldd	r30, Y+2	; 0x02
     766:	fb 81       	ldd	r31, Y+3	; 0x03
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:131
			showRGBInternal(pixels);
		}

		// Adjust the timer
#if (!defined(NO_CLOCK_CORRECTION) || (NO_CLOCK_CORRECTION == 0)) && (FASTLED_ALLOW_INTERRUPTS == 0)
        uint32_t microsTaken = (uint32_t)pixels.size() * (uint32_t)CLKS_TO_MICROS(24 * (T1 + T2 + T3));
     768:	20 ef       	ldi	r18, 0xF0	; 240
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	df 01       	movw	r26, r30
     76e:	49 d9       	rcall	.-3438   	; 0xfffffa02 <__eeprom_end+0xff7efa02>
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
     774:	a3 e0       	ldi	r26, 0x03	; 3
     776:	f6 94       	lsr	r15
     778:	e7 94       	ror	r14
     77a:	d7 94       	ror	r13
     77c:	c7 94       	ror	r12
     77e:	aa 95       	dec	r26
     780:	d1 f7       	brne	.-12     	; 0x776 <L_3833+0x12>
scale16by8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:508
        "  adc %B[result], __zero_reg__        \n\t"

        : [result] "+r" (result)
        : [i] "r" (i), [scale] "r" (scale)
        : "r0", "r1"
    );
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	8a e9       	ldi	r24, 0x9A	; 154
     78a:	e8 9f       	mul	r30, r24
     78c:	0e 0e       	add	r0, r30
     78e:	41 1d       	adc	r20, r1
     790:	f8 9f       	mul	r31, r24
     792:	40 0d       	add	r20, r0
     794:	51 1d       	adc	r21, r1
     796:	11 24       	eor	r1, r1
     798:	4f 0f       	add	r20, r31
     79a:	51 1d       	adc	r21, r1
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:136

        // adust for approximate observed actal runtime (as of January 2015)
        // roughly 9.6 cycles per pixel, which is 0.6us/pixel at 16MHz
        // microsTaken += nLeds * 0.6 * CLKS_TO_MICROS(16);
        microsTaken += scale16by8(pixels.size(),(0.6 * 256) + 1) * CLKS_TO_MICROS(16);
     79c:	ca 01       	movw	r24, r20
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	a0 e0       	ldi	r26, 0x00	; 0
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	aa 1f       	adc	r26, r26
     7a8:	bb 1f       	adc	r27, r27
     7aa:	8c 0d       	add	r24, r12
     7ac:	9d 1d       	adc	r25, r13
     7ae:	ae 1d       	adc	r26, r14
     7b0:	bf 1d       	adc	r27, r15
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:144
        // this is because the ONE interrupt that might come in while interrupts
        // are disabled is queued up, and it will be serviced as soon as
        // interrupts are re-enabled.
        // This actually should technically also account for the runtime of the
        // interrupt handler itself, but we're just not going to worry about that.
        if( microsTaken > 1000) {
     7b2:	89 3e       	cpi	r24, 0xE9	; 233
     7b4:	43 e0       	ldi	r20, 0x03	; 3
     7b6:	94 07       	cpc	r25, r20
     7b8:	a1 05       	cpc	r26, r1
     7ba:	b1 05       	cpc	r27, r1
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <L_3833+0x5c>
     7be:	34 c0       	rjmp	.+104    	; 0x828 <L_3833+0xc4>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:148

            // Since up to one timer tick will be queued, we don't need
            // to adjust the MS_COUNTER for that one.
            microsTaken -= 1000;
     7c0:	88 5e       	subi	r24, 0xE8	; 232
     7c2:	93 40       	sbci	r25, 0x03	; 3
     7c4:	a1 09       	sbc	r26, r1
     7c6:	b1 09       	sbc	r27, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:153

            // Now convert microseconds to 256ths of a second, approximately like this:
            // 250ths = (us/4)
            // 256ths = 250ths * (263/256);
            uint16_t x256ths = microsTaken >> 2;
     7c8:	42 e0       	ldi	r20, 0x02	; 2
     7ca:	b6 95       	lsr	r27
     7cc:	a7 95       	ror	r26
     7ce:	97 95       	ror	r25
     7d0:	87 95       	ror	r24
     7d2:	4a 95       	dec	r20
     7d4:	d1 f7       	brne	.-12     	; 0x7ca <L_3833+0x66>
scale16by8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:508
     7d6:	47 e0       	ldi	r20, 0x07	; 7
     7d8:	84 9f       	mul	r24, r20
     7da:	08 0e       	add	r0, r24
     7dc:	21 1d       	adc	r18, r1
     7de:	94 9f       	mul	r25, r20
     7e0:	20 0d       	add	r18, r0
     7e2:	31 1d       	adc	r19, r1
     7e4:	11 24       	eor	r1, r1
     7e6:	29 0f       	add	r18, r25
     7e8:	31 1d       	adc	r19, r1
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:156
            x256ths += scale16by8(x256ths,7);

            x256ths += gTimeErrorAccum256ths;
     7ea:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	86 0f       	add	r24, r22
     7f2:	97 1f       	adc	r25, r23
     7f4:	82 0f       	add	r24, r18
     7f6:	93 1f       	adc	r25, r19
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:157
            MS_COUNTER += (x256ths >> 8);
     7f8:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <timer0_millis>
     7fc:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <timer0_millis+0x1>
     800:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <timer0_millis+0x2>
     804:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <timer0_millis+0x3>
     808:	29 2f       	mov	r18, r25
     80a:	33 27       	eor	r19, r19
     80c:	42 0f       	add	r20, r18
     80e:	53 1f       	adc	r21, r19
     810:	61 1d       	adc	r22, r1
     812:	71 1d       	adc	r23, r1
     814:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <timer0_millis>
     818:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <timer0_millis+0x1>
     81c:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <timer0_millis+0x2>
     820:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <timer0_millis+0x3>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:158
            gTimeErrorAccum256ths = x256ths & 0xFF;
     824:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:178
        MS_COUNTER += (microsTaken >> 10);
#endif

#endif

		sei();
     828:	78 94       	sei
mark():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/fastled_delay.h:33
	}

	/// Reset the timestamp that marks the start of the wait period
	void mark() { mLastMicros = micros() & 0xFFFF; }
     82a:	87 dc       	rcall	.-1778   	; 0x13a <micros>
     82c:	f2 01       	movw	r30, r4
     82e:	70 8b       	std	Z+16, r23	; 0x10
     830:	67 87       	std	Z+15, r22	; 0x0f
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:180
		mWait.mark();
	}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	9f 90       	pop	r9
     848:	8f 90       	pop	r8
     84a:	7f 90       	pop	r7
     84c:	5f 90       	pop	r5
     84e:	4f 90       	pop	r4
     850:	08 95       	ret

00000852 <CLEDController::lanes()>:
_ZN14CLEDController5lanesEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:169
    /// @returns CLEDController::m_nLeds
    virtual int size() { return m_nLeds; }

    /// How many Lanes does this controller manage?
    /// @returns 1 for a non-Parallel controller
    virtual int lanes() { return 1; }
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	08 95       	ret

00000858 <ClocklessController<(unsigned char)11, 2, 5, 3, (EOrder)66, 0, false, 10>::init()>:
_ZN19ClocklessControllerILh11ELi2ELi5ELi3EL6EOrder66ELi0ELb0ELi10EE4initEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/fastpin_avr.h:22
template<uint8_t PIN, uint8_t _MASK, typename _PORT, typename _DDR, typename _PIN> class _AVRPIN {
public:
	typedef volatile uint8_t * port_ptr_t;
	typedef uint8_t port_t;

	inline static void setOutput() { _DDR::r() |= _MASK; }
     858:	bb 9a       	sbi	0x17, 3	; 23
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/clockless_trinket.h:115
	CMinWait<WAIT_TIME> mWait;

public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
	}
     85a:	08 95       	ret

0000085c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:635

    /// Write the passed in RGB data out to the LEDs managed by this controller
    /// @param data the RGB data to write out to the strip
    /// @param nLeds the number of LEDs being written out
    /// @param scale the RGB scaling to apply to each LED before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	62 97       	sbiw	r28, 0x12	; 18
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	6c 01       	movw	r12, r24
     884:	7a 01       	movw	r14, r20
     886:	38 01       	movw	r6, r16
     888:	82 2e       	mov	r8, r18
     88a:	dc 01       	movw	r26, r24
     88c:	1c 96       	adiw	r26, 0x0c	; 12
     88e:	2c 91       	ld	r18, X
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:636
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds < 0 ? -nLeds : nLeds, scale, getDither());
     890:	ca 01       	movw	r24, r20
     892:	57 ff       	sbrs	r21, 7
     894:	04 c0       	rjmp	.+8      	; 0x89e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x42>
     896:	88 27       	eor	r24, r24
     898:	99 27       	eor	r25, r25
     89a:	84 1b       	sub	r24, r20
     89c:	95 0b       	sbc	r25, r21
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:314
        /// Constructor
        /// @param d pointer to LED data
        /// @param len length of the LED data
        /// @param s LED scale values, as CRGB struct
        /// @param dither dither setting for the LEDs
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     89e:	7a 83       	std	Y+2, r23	; 0x02
     8a0:	69 83       	std	Y+1, r22	; 0x01
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	9e 83       	std	Y+6, r25	; 0x06
     8a8:	8d 83       	std	Y+5, r24	; 0x05
     8aa:	6d 86       	std	Y+13, r6	; 0x0d
     8ac:	7e 86       	std	Y+14, r7	; 0x0e
     8ae:	8f 86       	std	Y+15, r8	; 0x0f
enable_dithering():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:438
        /// If dithering is set to enabled, this will re-init the dithering values
        /// (init_binary_dithering()). Otherwise it will clear the stored dithering
        /// data.
        /// @param dither the dither setting
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8b0:	21 30       	cpi	r18, 0x01	; 1
     8b2:	41 f5       	brne	.+80     	; 0x904 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa8>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:439
                case BINARY_DITHER: init_binary_dithering(); break;
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	b8 dd       	rcall	.-1168   	; 0x42a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:316
        /// @param len length of the LED data
        /// @param s LED scale values, as CRGB struct
        /// @param dither dither setting for the LEDs
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	88 8b       	std	Y+16, r24	; 0x10
initOffsets():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:290
        /// Initialize the PixelController::mOffsets array based on the length of the strip
        /// @param len the number of LEDs in one lane of the strip
        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; ++i) {
            mOffsets[i] = nOffset;
     8be:	1a 8a       	std	Y+18, r1	; 0x12
     8c0:	19 8a       	std	Y+17, r1	; 0x11
_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:637
    /// @param data the RGB data to write out to the strip
    /// @param nLeds the number of LEDs being written out
    /// @param scale the RGB scaling to apply to each LED before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds < 0 ? -nLeds : nLeds, scale, getDither());
        if(nLeds < 0) {
     8c2:	f7 fe       	sbrs	r15, 7
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x6e>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:639
            // nLeds < 0 implies that we want to show them in reverse
            pixels.mAdvance = -pixels.mAdvance;
     8c6:	8d ef       	ldi	r24, 0xFD	; 253
     8c8:	88 8b       	std	Y+16, r24	; 0x10
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:641
        }
        showPixels(pixels);
     8ca:	d6 01       	movw	r26, r12
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	06 84       	ldd	r0, Z+14	; 0x0e
     8d2:	f7 85       	ldd	r31, Z+15	; 0x0f
     8d4:	e0 2d       	mov	r30, r0
     8d6:	be 01       	movw	r22, r28
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	c6 01       	movw	r24, r12
     8de:	09 95       	icall
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:642
    }
     8e0:	62 96       	adiw	r28, 0x12	; 18
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	8f 90       	pop	r8
     8fe:	7f 90       	pop	r7
     900:	6f 90       	pop	r6
     902:	08 95       	ret
enable_dithering():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:440
        /// data.
        /// @param dither the dither setting
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     904:	1c 86       	std	Y+12, r1	; 0x0c
     906:	1b 86       	std	Y+11, r1	; 0x0b
     908:	1a 86       	std	Y+10, r1	; 0x0a
     90a:	19 86       	std	Y+9, r1	; 0x09
     90c:	18 86       	std	Y+8, r1	; 0x08
     90e:	1f 82       	std	Y+7, r1	; 0x07
     910:	d4 cf       	rjmp	.-88     	; 0x8ba <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x5e>

00000912 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:626

    /// Set all the LEDs on the controller to a given color
    /// @param data the CRGB color to set the LEDs to
    /// @param nLeds the number of LEDs to set to this color
    /// @param scale the RGB scaling value for outputting color
    virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	62 97       	sbiw	r28, 0x12	; 18
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	7c 01       	movw	r14, r24
     930:	dc 01       	movw	r26, r24
     932:	1c 96       	adiw	r26, 0x0c	; 12
     934:	8c 91       	ld	r24, X
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:325
        /// Constructor
        /// @param d pointer to LED data
        /// @param len length of the LED data
        /// @param s LED scale values, as CRGB struct
        /// @param dither dither setting for the LEDs
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     936:	7a 83       	std	Y+2, r23	; 0x02
     938:	69 83       	std	Y+1, r22	; 0x01
     93a:	5c 83       	std	Y+4, r21	; 0x04
     93c:	4b 83       	std	Y+3, r20	; 0x03
     93e:	5e 83       	std	Y+6, r21	; 0x06
     940:	4d 83       	std	Y+5, r20	; 0x05
     942:	0d 87       	std	Y+13, r16	; 0x0d
     944:	1e 87       	std	Y+14, r17	; 0x0e
     946:	2f 87       	std	Y+15, r18	; 0x0f
enable_dithering():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:438
        /// If dithering is set to enabled, this will re-init the dithering values
        /// (init_binary_dithering()). Otherwise it will clear the stored dithering
        /// data.
        /// @param dither the dither setting
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	f1 f4       	brne	.+60     	; 0x988 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:439
                case BINARY_DITHER: init_binary_dithering(); break;
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	6c dd       	rcall	.-1320   	; 0x42a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:327
        /// @param len length of the LED data
        /// @param s LED scale values, as CRGB struct
        /// @param dither dither setting for the LEDs
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     952:	18 8a       	std	Y+16, r1	; 0x10
initOffsets():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:290
        /// Initialize the PixelController::mOffsets array based on the length of the strip
        /// @param len the number of LEDs in one lane of the strip
        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; ++i) {
            mOffsets[i] = nOffset;
     954:	1a 8a       	std	Y+18, r1	; 0x12
     956:	19 8a       	std	Y+17, r1	; 0x11
_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:628
    /// @param data the CRGB color to set the LEDs to
    /// @param nLeds the number of LEDs to set to this color
    /// @param scale the RGB scaling value for outputting color
    virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
        showPixels(pixels);
     958:	d7 01       	movw	r26, r14
     95a:	ed 91       	ld	r30, X+
     95c:	fc 91       	ld	r31, X
     95e:	06 84       	ldd	r0, Z+14	; 0x0e
     960:	f7 85       	ldd	r31, Z+15	; 0x0f
     962:	e0 2d       	mov	r30, r0
     964:	be 01       	movw	r22, r28
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	c7 01       	movw	r24, r14
     96c:	09 95       	icall
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:629
    }
     96e:	62 96       	adiw	r28, 0x12	; 18
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret
enable_dithering():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:440
        /// data.
        /// @param dither the dither setting
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     988:	1c 86       	std	Y+12, r1	; 0x0c
     98a:	1b 86       	std	Y+11, r1	; 0x0b
     98c:	1a 86       	std	Y+10, r1	; 0x0a
     98e:	19 86       	std	Y+9, r1	; 0x09
     990:	18 86       	std	Y+8, r1	; 0x08
     992:	1f 82       	std	Y+7, r1	; 0x07
     994:	de cf       	rjmp	.-68     	; 0x952 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x40>

00000996 <ColorLeds(CRGB)>:
_Z9ColorLeds4CRGB():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:475
		else if	(ColorSwitch == BlueDD)		{TempColor = CRGB(0, 0, Vect[TempIndex]);}
		leds[iLed] = TempColor;
	}
}

void ColorLeds(CRGB color)	{
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	6b 01       	movw	r12, r22
     99e:	e8 2e       	mov	r14, r24
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:476
	for (iLed=0; iLed<NUM_LEDS; iLed++) {
     9a0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <iLed>
     9a4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <iLed>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	80 f4       	brcc	.+32     	; 0x9cc <ColorLeds(CRGB)+0x36>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:477
		leds[iLed] = color; 
     9ac:	28 2f       	mov	r18, r24
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	f9 01       	movw	r30, r18
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e2 0f       	add	r30, r18
     9b8:	f3 1f       	adc	r31, r19
     9ba:	e9 52       	subi	r30, 0x29	; 41
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	c0 82       	st	Z, r12
     9c0:	d1 82       	std	Z+1, r13	; 0x01
     9c2:	e2 82       	std	Z+2, r14	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:476
		leds[iLed] = TempColor;
	}
}

void ColorLeds(CRGB color)	{
	for (iLed=0; iLed<NUM_LEDS; iLed++) {
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
     9ca:	ec cf       	rjmp	.-40     	; 0x9a4 <ColorLeds(CRGB)+0xe>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:479
		leds[iLed] = color; 
	}
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	08 95       	ret

000009d4 <ShiftLed(unsigned char)>:
_Z8ShiftLedh():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:464

void ShiftLed(uint8_t ColorSwitch)	{
	CRGB TempColor;
	uint8_t TempIndex;
	for (iLed=0; iLed<NUM_LEDS; iLed++) {
		TempIndex = iLed + iFrame;
     9d4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <iFrame>
     9d8:	a7 ed       	ldi	r26, 0xD7	; 215
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	44 e1       	ldi	r20, 0x14	; 20
     9de:	49 0f       	add	r20, r25
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:463
}

void ShiftLed(uint8_t ColorSwitch)	{
	CRGB TempColor;
	uint8_t TempIndex;
	for (iLed=0; iLed<NUM_LEDS; iLed++) {
     9e0:	49 17       	cp	r20, r25
     9e2:	c9 f0       	breq	.+50     	; 0xa16 <ShiftLed(unsigned char)+0x42>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:466
		TempIndex = iLed + iFrame;
		if(TempIndex >= NUM_LEDS)	{ 
			TempIndex = TempIndex - NUM_LEDS;
     9e4:	ec ee       	ldi	r30, 0xEC	; 236
     9e6:	e9 0f       	add	r30, r25
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:465
void ShiftLed(uint8_t ColorSwitch)	{
	CRGB TempColor;
	uint8_t TempIndex;
	for (iLed=0; iLed<NUM_LEDS; iLed++) {
		TempIndex = iLed + iFrame;
		if(TempIndex >= NUM_LEDS)	{ 
     9e8:	94 31       	cpi	r25, 0x14	; 20
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <ShiftLed(unsigned char)+0x1a>
     9ec:	e9 2f       	mov	r30, r25
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	ee 53       	subi	r30, 0x3E	; 62
     9f2:	ff 4f       	sbci	r31, 0xFF	; 255
     9f4:	20 81       	ld	r18, Z
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:469
			TempIndex = TempIndex - NUM_LEDS;
		}
		if		(ColorSwitch == RedDD)		{TempColor = CRGB(Vect[TempIndex], 0, 0);}
		else if	(ColorSwitch == GreenDD)	{TempColor = CRGB(0, Vect[TempIndex], 0);}
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	11 f4       	brne	.+4      	; 0x9fe <ShiftLed(unsigned char)+0x2a>
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <ShiftLed(unsigned char)+0x2e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:470
		else if	(ColorSwitch == BlueDD)		{TempColor = CRGB(0, 0, Vect[TempIndex]);}
     9fe:	32 2f       	mov	r19, r18
     a00:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:471
		leds[iLed] = TempColor;
     a02:	1c 92       	st	X, r1
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	2c 93       	st	X, r18
     a08:	11 97       	sbiw	r26, 0x01	; 1
     a0a:	12 96       	adiw	r26, 0x02	; 2
     a0c:	3c 93       	st	X, r19
     a0e:	12 97       	sbiw	r26, 0x02	; 2
     a10:	13 96       	adiw	r26, 0x03	; 3
     a12:	9f 5f       	subi	r25, 0xFF	; 255
     a14:	e5 cf       	rjmp	.-54     	; 0x9e0 <ShiftLed(unsigned char)+0xc>
     a16:	84 e1       	ldi	r24, 0x14	; 20
     a18:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:473
	}
}
     a1c:	08 95       	ret

00000a1e <CLEDController::getMaxRefreshRate() const>:
_ZNK14CLEDController17getMaxRefreshRateEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:249
      #endif
    }

    /// Gets the maximum possible refresh rate of the strip
    /// @returns the maximum refresh rate, in frames per second (FPS)
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret

00000a24 <CLEDController::size()>:
_ZN14CLEDController4sizeEv():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:165
        }
    }

    /// How many LEDs does this controller manage?
    /// @returns CLEDController::m_nLeds
    virtual int size() { return m_nLeds; }
     a24:	fc 01       	movw	r30, r24
     a26:	85 85       	ldd	r24, Z+13	; 0x0d
     a28:	96 85       	ldd	r25, Z+14	; 0x0e
     a2a:	08 95       	ret

00000a2c <CLEDController::clearLeds(int)>:
_ZN14CLEDController9clearLedsEi():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:99
    /// Initialize the LED controller
    virtual void init() = 0;

    /// Clear out/zero out the given number of LEDs.
    /// @param nLeds the number of LEDs to clear
    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <CLEDController::clearLeds(int)+0xa>
     a36:	1f 92       	push	r1
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	ab 01       	movw	r20, r22
_ZN4CRGBC2Em():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:176
    }

    /// Allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     a3e:	19 82       	std	Y+1, r1	; 0x01
     a40:	1a 82       	std	Y+2, r1	; 0x02
     a42:	1b 82       	std	Y+3, r1	; 0x03
showColor():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:120
    /// @param data the CRGB color to set the LEDs to
    /// @param nLeds the number of LEDs in the data array
    /// @param brightness the brightness of the LEDs
    /// @see showColor(const struct CRGB&, int, CRGB)
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     a44:	dc 01       	movw	r26, r24
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	01 90       	ld	r0, Z+
     a4c:	f0 81       	ld	r31, Z
     a4e:	e0 2d       	mov	r30, r0
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	10 e0       	ldi	r17, 0x00	; 0
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	09 95       	icall
_ZN14CLEDController9clearLedsEi():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:99
    /// Initialize the LED controller
    virtual void init() = 0;

    /// Clear out/zero out the given number of LEDs.
    /// @param nLeds the number of LEDs to clear
    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/abi.cpp:26
extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

namespace std {
  [[gnu::weak, noreturn]] void terminate() {
    abort();
     a6e:	e9 d7       	rcall	.+4050   	; 0x1a42 <abort>

00000a70 <__vector_9>:
__vector_9():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     a86:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <timer0_millis>
     a8a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <timer0_millis+0x1>
     a8e:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <timer0_millis+0x2>
     a92:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <timer0_millis+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     a96:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <timer0_fract>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     a9a:	26 e0       	ldi	r18, 0x06	; 6
     a9c:	23 0f       	add	r18, r19
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     a9e:	2d 37       	cpi	r18, 0x7D	; 125
     aa0:	68 f1       	brcs	.+90     	; 0xafc <__vector_9+0x8c>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     aa2:	29 e8       	ldi	r18, 0x89	; 137
     aa4:	23 0f       	add	r18, r19
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     aa6:	03 96       	adiw	r24, 0x03	; 3
     aa8:	a1 1d       	adc	r26, r1
     aaa:	b1 1d       	adc	r27, r1
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     aac:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <timer0_fract>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     ab0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer0_millis>
     ab4:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <timer0_millis+0x1>
     ab8:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <timer0_millis+0x2>
     abc:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <timer0_millis+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     ac0:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <timer0_overflow_count>
     ac4:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <timer0_overflow_count+0x1>
     ac8:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <timer0_overflow_count+0x2>
     acc:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <timer0_overflow_count+0x3>
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	a1 1d       	adc	r26, r1
     ad4:	b1 1d       	adc	r27, r1
     ad6:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <timer0_overflow_count>
     ada:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <timer0_overflow_count+0x1>
     ade:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <timer0_overflow_count+0x2>
     ae2:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <timer0_overflow_count+0x3>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     afc:	02 96       	adiw	r24, 0x02	; 2
     afe:	a1 1d       	adc	r26, r1
     b00:	b1 1d       	adc	r27, r1
     b02:	d4 cf       	rjmp	.-88     	; 0xaac <__vector_9+0x3c>

00000b04 <main>:
main():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     b04:	78 94       	sei
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     b06:	83 b7       	in	r24, 0x33	; 51
     b08:	83 60       	ori	r24, 0x03	; 3
     b0a:	83 bf       	out	0x33, r24	; 51
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     b0c:	89 b7       	in	r24, 0x39	; 57
     b0e:	81 60       	ori	r24, 0x01	; 1
     b10:	89 bf       	out	0x39, r24	; 57
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	8e bd       	out	0x2e, r24	; 46
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     b16:	8e b5       	in	r24, 0x2e	; 46
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	8e bd       	out	0x2e, r24	; 46
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     b1c:	8f b5       	in	r24, 0x2f	; 47
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	8f bd       	out	0x2f, r24	; 47
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     b22:	85 b5       	in	r24, 0x25	; 37
     b24:	84 60       	ori	r24, 0x04	; 4
     b26:	85 bd       	out	0x25, r24	; 37
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     b28:	85 b5       	in	r24, 0x25	; 37
     b2a:	80 64       	ori	r24, 0x40	; 64
     b2c:	85 bd       	out	0x25, r24	; 37
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     b2e:	86 e8       	ldi	r24, 0x86	; 134
     b30:	86 b9       	out	0x06, r24	; 6
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     b32:	1a b8       	out	0x0a, r1	; 10
pinMode():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
     b34:	e9 e6       	ldi	r30, 0x69	; 105
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	24 91       	lpm	r18, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     b3a:	e2 e5       	ldi	r30, 0x52	; 82
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	84 91       	lpm	r24, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     b40:	88 23       	and	r24, r24
     b42:	c1 f0       	breq	.+48     	; 0xb74 <main+0x70>
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	fc 01       	movw	r30, r24
     b4c:	e0 5d       	subi	r30, 0xD0	; 208
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	c5 91       	lpm	r28, Z+
     b52:	d4 91       	lpm	r29, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     b54:	fc 01       	movw	r30, r24
     b56:	ea 5d       	subi	r30, 0xDA	; 218
     b58:	ff 4f       	sbci	r31, 0xFF	; 255
     b5a:	a5 91       	lpm	r26, Z+
     b5c:	b4 91       	lpm	r27, Z
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:48
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
     b5e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     b60:	f8 94       	cli
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     b62:	38 81       	ld	r19, Y
     b64:	82 2f       	mov	r24, r18
     b66:	80 95       	com	r24
     b68:	83 23       	and	r24, r19
     b6a:	88 83       	st	Y, r24
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     b6c:	ec 91       	ld	r30, X
     b6e:	e2 2b       	or	r30, r18
     b70:	ec 93       	st	X, r30
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     b72:	9f bf       	out	0x3f, r25	; 63
addLeds():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:352
	/// @{

	/// Add a clockless based CLEDController instance to the world.
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
     b74:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <guard variable for CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c>
     b78:	81 11       	cpse	r24, r1
     b7a:	45 c0       	rjmp	.+138    	; 0xc06 <main+0x102>
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:87
    /// @param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
    /// Create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     b7c:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x3>
     b80:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x2>
_ZN4CRGBC2E18LEDColorCorrection():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:183
    }

    /// Allow construction from a LEDColorCorrection enum
    /// @param colorcode an LEDColorCorrect enumeration value
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x6>
     b8a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x7>
     b8e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x8>
_ZN4CRGBC2E16ColorTemperature():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:191
    }

    /// Allow construction from a ColorTemperature enum
    /// @param colorcode an ColorTemperature enumeration value
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b92:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x9>
     b96:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xa>
     b9a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xb>
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:87
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xc>
     ba4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xe>
     ba8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xd>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:88
        m_pNext = NULL;
     bac:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x5>
     bb0:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x4>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:89
        if(m_pHead==NULL) { m_pHead = this; }
     bb4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CLEDController::m_pHead>
     bb8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <CLEDController::m_pHead+0x1>
     bbc:	89 2b       	or	r24, r25
     bbe:	31 f4       	brne	.+12     	; 0xbcc <main+0xc8>
     bc0:	89 ea       	ldi	r24, 0xA9	; 169
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <CLEDController::m_pHead+0x1>
     bc8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CLEDController::m_pHead>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:90
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     bcc:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <CLEDController::m_pTail>
     bd0:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <CLEDController::m_pTail+0x1>
     bd4:	30 97       	sbiw	r30, 0x00	; 0
     bd6:	21 f0       	breq	.+8      	; 0xbe0 <main+0xdc>
     bd8:	89 ea       	ldi	r24, 0xA9	; 169
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	95 83       	std	Z+5, r25	; 0x05
     bde:	84 83       	std	Z+4, r24	; 0x04
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:91
        m_pTail = this;
     be0:	89 ea       	ldi	r24, 0xA9	; 169
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <CLEDController::m_pTail+0x1>
     be8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <CLEDController::m_pTail>
_ZN8CMinWaitILi10EEC2Ev():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/fastled_delay.h:22
	/// Timestamp of the last time this was run, in microseconds
	uint16_t mLastMicros;

public:
	/// Constructor
	CMinWait() { mLastMicros = 0; }
     bec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x10>
     bf0:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xf>
__base_ctor ():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:132
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};           ///< @copydoc UCS1903BController800Khz
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};             ///< @copydoc UCS1904Controller800Khz
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};                   ///< @copydoc UCS2903Controller
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};               ///< @copydoc WS2812Controller800Khz
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2852 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};               ///< WS2852 controller class. @copydetails WS2812Controller800Khz
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812B : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};              ///< WS2812B controller class. @copydetails WS2812Controller800Khz
     bf4:	8b e7       	ldi	r24, 0x7B	; 123
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x1>
     bfc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c>
addLeds():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:352
	/// @{

	/// Add a clockless based CLEDController instance to the world.
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <guard variable for CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c>
setOutput():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/platforms/avr/fastpin_avr.h:22
     c06:	bb 9a       	sbi	0x17, 3	; 23
_ZN14CLEDController7setLedsEP4CRGBi():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:151

    /// Set the default array of LEDs to be used by this controller
    /// @param data pointer to the LED data
    /// @param nLeds the number of LEDs in the LED data
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
     c08:	87 ed       	ldi	r24, 0xD7	; 215
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x3>
     c10:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0x2>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/controller.h:152
        m_nLeds = nLeds;
     c14:	84 e1       	ldi	r24, 0x14	; 20
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xe>
     c1c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <CLEDController& CFastLED::addLeds<WS2812B, (unsigned char)11, (EOrder)66>(CRGB*, int, int)::c+0xd>
setMaxRefreshRate():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:242
void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
	if(constrain) {
		// if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
		// allowed to slow things down if constraining)
		if(refresh > 0) {
			m_nMinMicros = ((1000000 / refresh) > m_nMinMicros) ? (1000000 / refresh) : m_nMinMicros;
     c20:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <FastLED+0x3>
     c24:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <FastLED+0x4>
     c28:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <FastLED+0x5>
     c2c:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <FastLED+0x6>
     c30:	84 3c       	cpi	r24, 0xC4	; 196
     c32:	09 e0       	ldi	r16, 0x09	; 9
     c34:	90 07       	cpc	r25, r16
     c36:	a1 05       	cpc	r26, r1
     c38:	b1 05       	cpc	r27, r1
     c3a:	20 f4       	brcc	.+8      	; 0xc44 <main+0x140>
     c3c:	84 ec       	ldi	r24, 0xC4	; 196
     c3e:	99 e0       	ldi	r25, 0x09	; 9
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FastLED+0x3>
     c48:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FastLED+0x4>
     c4c:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <FastLED+0x5>
     c50:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <FastLED+0x6>
_ZN8CFastLED13setBrightnessEh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:553
	/// @} Adding parallel output controllers
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     c54:	82 e3       	ldi	r24, 0x32	; 50
     c56:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <FastLED>
     c5a:	c4 e1       	ldi	r28, 0x14	; 20
     c5c:	2c 2e       	mov	r2, r28
     c5e:	31 2c       	mov	r3, r1
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:400
		else if(xFrame == 11)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 255, 0);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iFrame + iLed], 255, 0);
     c60:	d3 e1       	ldi	r29, 0x13	; 19
     c62:	8d 2e       	mov	r8, r29
     c64:	91 2c       	mov	r9, r1
random():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
     c66:	c1 2c       	mov	r12, r1
     c68:	d1 2c       	mov	r13, r1
     c6a:	76 01       	movw	r14, r12
     c6c:	ca 94       	dec	r12
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:391
                // 110
                //case 6: // P -- K
                r = K85 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
     c6e:	1b ea       	ldi	r17, 0xAB	; 171
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:52
			if(digitalRead(BUTTON_PIN) == 0)	{
				Status += 1;
				iFrame = 0;
				xFrame = 0;
				FastLED.setBrightness(BRIGHTNESS);
				ResetStatus = 1;
     c70:	c1 e0       	ldi	r28, 0x01	; 1
     c72:	d4 e1       	ldi	r29, 0x14	; 20
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:44


}

void loop() {
	for(i = 0; i < FrameDelay; i++)	{
     c74:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <i>
     c78:	b0 90 18 01 	lds	r11, 0x0118	; 0x800118 <i>
     c7c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <FrameDelay>
     c80:	b8 16       	cp	r11, r24
     c82:	e0 f4       	brcc	.+56     	; 0xcbc <main+0x1b8>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:45
		if(digitalRead(BUTTON_PIN) == 0) {
     c84:	29 da       	rcall	.-2990   	; 0xd8 <digitalRead.constprop.10>
     c86:	89 2b       	or	r24, r25
     c88:	79 f5       	brne	.+94     	; 0xce8 <main+0x1e4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:46
			delay(30);											//Debounce.
     c8a:	6e e1       	ldi	r22, 0x1E	; 30
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9b db       	rcall	.-2250   	; 0x3ca <delay>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:47
			if(digitalRead(BUTTON_PIN) == 0)	{
     c94:	21 da       	rcall	.-3006   	; 0xd8 <digitalRead.constprop.10>
     c96:	89 2b       	or	r24, r25
     c98:	39 f5       	brne	.+78     	; 0xce8 <main+0x1e4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:48
				Status += 1;
     c9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:49
				iFrame = 0;
     ca4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:50
				xFrame = 0;
     ca8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <xFrame>
_ZN8CFastLED13setBrightnessEh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:553
     cac:	22 e3       	ldi	r18, 0x32	; 50
     cae:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <FastLED>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:52
				FastLED.setBrightness(BRIGHTNESS);
				ResetStatus = 1;
     cb2:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <ResetStatus>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:53
				while(digitalRead(BUTTON_PIN) == 0)	{}		//Wait button release.
     cb6:	10 da       	rcall	.-3040   	; 0xd8 <digitalRead.constprop.10>
     cb8:	89 2b       	or	r24, r25
     cba:	e9 f3       	breq	.-6      	; 0xcb6 <main+0x1b2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:60
			}
		}
		delay(5);
	}
	//////////////////// STATUS 0 ///////////////////////
	if(Status == 0)	{
     cbc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:61
		ColorLeds(CRGB::Red);
     cc0:	6f ef       	ldi	r22, 0xFF	; 255
     cc2:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:60
			}
		}
		delay(5);
	}
	//////////////////// STATUS 0 ///////////////////////
	if(Status == 0)	{
     cc4:	88 23       	and	r24, r24
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <main+0x1ce>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:67
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		FrameDelay = 255;
	}
	//////////////////// STATUS 1 ///////////////////////
	else if(Status == 1)	{
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	b9 f4       	brne	.+46     	; 0xcfa <main+0x1f6>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:68
		ColorLeds(CRGB::Green);
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e8       	ldi	r23, 0x80	; 128
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 de       	rcall	.-830    	; 0x996 <ColorLeds(CRGB)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:70
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
     cd4:	58 da       	rcall	.-2896   	; 0x186 <CFastLED::show() [clone .constprop.13]>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:71
		FrameDelay = 255;
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:154
  	else if(Status == 8)  {
		fill_rainbow_circular(leds,NUM_LEDS,iFrame);
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		iFrame += 10;
		FrameDelay = 5;
     cd8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <FrameDelay>
main():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
     cdc:	e0 e0       	ldi	r30, 0x00	; 0
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ef 2b       	or	r30, r31
     ce2:	41 f2       	breq	.-112    	; 0xc74 <main+0x170>
     ce4:	8d d9       	rcall	.-3302   	; 0x0 <__vectors>
     ce6:	c4 cf       	rjmp	.-120    	; 0xc70 <main+0x16c>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:57
				ResetStatus = 1;
				while(digitalRead(BUTTON_PIN) == 0)	{}		//Wait button release.
				break;
			}
		}
		delay(5);
     ce8:	65 e0       	ldi	r22, 0x05	; 5
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	6c db       	rcall	.-2344   	; 0x3ca <delay>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:44


}

void loop() {
	for(i = 0; i < FrameDelay; i++)	{
     cf2:	b3 94       	inc	r11
     cf4:	b0 92 18 01 	sts	0x0118, r11	; 0x800118 <i>
     cf8:	bf cf       	rjmp	.-130    	; 0xc78 <main+0x174>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:74
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		FrameDelay = 255;
	}
	//////////////////// STATUS 2 ///////////////////////
	else if(Status == 2)	{
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	21 f4       	brne	.+8      	; 0xd06 <main+0x202>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:75
		ColorLeds(CRGB::Blue);
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	e6 cf       	rjmp	.-52     	; 0xcd2 <main+0x1ce>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:82
		FastLED.show();
		FrameDelay = 255;
	}

	//////////////////// STATUS 3 ///////////////////////
	else if(Status == 3)	{
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	21 f4       	brne	.+8      	; 0xd12 <main+0x20e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:83
		ColorLeds(CRGB::Purple);
     d0a:	60 e8       	ldi	r22, 0x80	; 128
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	e0 cf       	rjmp	.-64     	; 0xcd2 <main+0x1ce>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:90
		FastLED.show();
		FrameDelay = 255;
	}
	//////////////////// STATUS 4 ///////////////////////
	else if(Status == 4)	{
		ColorLeds(CRGB::Red);
     d12:	6f ef       	ldi	r22, 0xFF	; 255
     d14:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:89
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		FrameDelay = 255;
	}
	//////////////////// STATUS 4 ///////////////////////
	else if(Status == 4)	{
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	21 f0       	breq	.+8      	; 0xd22 <main+0x21e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:104
			iFrame -= 1;
		}
		FrameDelay = 5;
	}
	//////////////////// STATUS 5 ///////////////////////
	else if(Status == 5)	{
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	e1 f4       	brne	.+56     	; 0xd56 <main+0x252>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:105
		ColorLeds(CRGB::Green);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e8       	ldi	r23, 0x80	; 128
     d22:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:135
		}
		FrameDelay = 5;
	}
	//////////////////// STATUS 7 ///////////////////////
	else if(Status == 7)	{
		ColorLeds(CRGB::Purple);
     d24:	38 de       	rcall	.-912    	; 0x996 <ColorLeds(CRGB)>
_ZN8CFastLED13setBrightnessEh():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.h:553
     d26:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
     d2a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <FastLED>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:137
		FastLED.setBrightness(iFrame);
		FastLED.show();
     d2e:	2b da       	rcall	.-2986   	; 0x186 <CFastLED::show() [clone .constprop.13]>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:138
		if			(iFrame == BRIGHTNESS)	CountDir = CountDown;
     d30:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
     d34:	82 33       	cpi	r24, 0x32	; 50
     d36:	d9 f4       	brne	.+54     	; 0xd6e <main+0x26a>
     d38:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <CountDir>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:140
		else if	(iFrame == 0)				CountDir = CountUp;
		if(CountDir == CountUp)	{
     d3c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <CountDir>
     d40:	91 11       	cpse	r25, r1
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <main+0x248>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:141
			iFrame += 1;
     d44:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:153
	//////////////////// STATUS 8 ///////////////////////
  	else if(Status == 8)  {
		fill_rainbow_circular(leds,NUM_LEDS,iFrame);
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		iFrame += 10;
     d46:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <iFrame>
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <main+0x24e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:99
		else if	(iFrame == 0)				CountDir = CountUp;
		if(CountDir == CountUp)	{
			iFrame += 1;
		}
		else if(CountDir == CountDown)	{
			iFrame -= 1;
     d4c:	81 50       	subi	r24, 0x01	; 1
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:98
		if			(iFrame == BRIGHTNESS)	CountDir = CountDown;
		else if	(iFrame == 0)				CountDir = CountUp;
		if(CountDir == CountUp)	{
			iFrame += 1;
		}
		else if(CountDir == CountDown)	{
     d4e:	91 30       	cpi	r25, 0x01	; 1
     d50:	d1 f3       	breq	.-12     	; 0xd46 <main+0x242>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:154
  	else if(Status == 8)  {
		fill_rainbow_circular(leds,NUM_LEDS,iFrame);
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
		iFrame += 10;
		FrameDelay = 5;
     d52:	85 e0       	ldi	r24, 0x05	; 5
     d54:	c1 cf       	rjmp	.-126    	; 0xcd8 <main+0x1d4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:119
			iFrame -= 1;
		}
		FrameDelay = 5;
	}
	//////////////////// STATUS 6 ///////////////////////
	else if(Status == 6)	{
     d56:	86 30       	cpi	r24, 0x06	; 6
     d58:	21 f4       	brne	.+8      	; 0xd62 <main+0x25e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:120
		ColorLeds(CRGB::Blue);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	e1 cf       	rjmp	.-62     	; 0xd24 <main+0x220>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:134
			iFrame -= 1;
		}
		FrameDelay = 5;
	}
	//////////////////// STATUS 7 ///////////////////////
	else if(Status == 7)	{
     d62:	87 30       	cpi	r24, 0x07	; 7
     d64:	49 f4       	brne	.+18     	; 0xd78 <main+0x274>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:135
		ColorLeds(CRGB::Purple);
     d66:	60 e8       	ldi	r22, 0x80	; 128
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	db cf       	rjmp	.-74     	; 0xd24 <main+0x220>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:139
		FastLED.setBrightness(iFrame);
		FastLED.show();
		if			(iFrame == BRIGHTNESS)	CountDir = CountDown;
		else if	(iFrame == 0)				CountDir = CountUp;
     d6e:	81 11       	cpse	r24, r1
     d70:	e5 cf       	rjmp	.-54     	; 0xd3c <main+0x238>
     d72:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <CountDir>
     d76:	e2 cf       	rjmp	.-60     	; 0xd3c <main+0x238>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:149
			iFrame -= 1;
		}
		FrameDelay = 5;
	}
	//////////////////// STATUS 8 ///////////////////////
  	else if(Status == 8)  {
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	09 f0       	breq	.+2      	; 0xd7e <main+0x27a>
     d7c:	87 c0       	rjmp	.+270    	; 0xe8c <L_5390+0xaa>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:150
		fill_rainbow_circular(leds,NUM_LEDS,iFrame);
     d7e:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <iFrame>
     d82:	e7 ed       	ldi	r30, 0xD7	; 215
     d84:	f0 e0       	ldi	r31, 0x00	; 0
fill_rainbow_circular():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/colorutils.cpp:73
void fill_rainbow_circular(struct CRGB* targetArray, int numToFill, uint8_t initialhue, bool reversed)
{
    if (numToFill == 0) return;  // avoiding div/0

    CHSV hsv;
    hsv.hue = initialhue;
     d86:	47 2f       	mov	r20, r23
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/colorutils.cpp:78
    hsv.val = 255;
    hsv.sat = 240;

    const uint16_t hueChange = 65535 / (uint16_t)numToFill;  // hue change for each LED, * 256 for precision (256 * 256 - 1)
    uint16_t hueOffset = 0;  // offset for hue value, with precision (*256)
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
scale8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:93
        "clr __zero_reg__    \n\t"

        : "+a" (i)      /* writes to i */
        : "a"  (scale)  /* uses scale */
        : "r0", "r1"    /* clobbers r0, r1 */
    );
     d8c:	b5 e5       	ldi	r27, 0x55	; 85
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:398
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
     d8e:	60 e0       	ldi	r22, 0x00	; 0
scale8_video():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:133
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1"
    );
     d90:	af e0       	ldi	r26, 0x0F	; 15
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:289
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
     d92:	34 2f       	mov	r19, r20
     d94:	33 0f       	add	r19, r19
     d96:	33 0f       	add	r19, r19
     d98:	33 0f       	add	r19, r19
scale8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:93
        "clr __zero_reg__    \n\t"

        : "+a" (i)      /* writes to i */
        : "a"  (scale)  /* uses scale */
        : "r0", "r1"    /* clobbers r0, r1 */
    );
     d9a:	23 2f       	mov	r18, r19
     d9c:	5b 2f       	mov	r21, r27
     d9e:	25 9f       	mul	r18, r21
     da0:	02 0e       	add	r0, r18
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	21 1d       	adc	r18, r1
     da6:	11 24       	eor	r1, r1
     da8:	04 2f       	mov	r16, r20
     daa:	00 74       	andi	r16, 0x40	; 64
     dac:	54 2f       	mov	r21, r20
     dae:	50 72       	andi	r21, 0x20	; 32
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:301
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
     db0:	47 fd       	sbrc	r20, 7
     db2:	4e c0       	rjmp	.+156    	; 0xe50 <L_5390+0x6e>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:303
        // 0XX
        if( ! (hue & 0x40) ) {
     db4:	01 11       	cpse	r16, r1
     db6:	3a c0       	rjmp	.+116    	; 0xe2c <L_5390+0x4a>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:306
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
     db8:	51 11       	cpse	r21, r1
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <main+0x2c4>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:309
                // 000
                //case 0: // R -> O
                r = K255 - third;
     dbc:	32 2f       	mov	r19, r18
     dbe:	30 95       	com	r19
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:310
                g = third;
     dc0:	42 2f       	mov	r20, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:340
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
     dc2:	23 2f       	mov	r18, r19
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:342
                    g = K170 + third;
                    b = 0;
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <main+0x2cc>
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:318
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
     dc8:	45 e5       	ldi	r20, 0x55	; 85
     dca:	42 0f       	add	r20, r18
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:319
                    b = 0;
     dcc:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:317
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
     dce:	2b ea       	ldi	r18, 0xAB	; 171
scale8_video():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:133
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1"
    );
     dd0:	56 2f       	mov	r21, r22
     dd2:	0a 2f       	mov	r16, r26
     dd4:	00 23       	and	r16, r16
     dd6:	29 f0       	breq	.+10     	; 0xde2 <L_5390>
     dd8:	00 9f       	mul	r16, r16
     dda:	51 2d       	mov	r21, r1
     ddc:	11 24       	eor	r1, r1
     dde:	01 11       	cpse	r16, r1
     de0:	5f 5f       	subi	r21, 0xFF	; 255

00000de2 <L_5390>:
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:419
            r = 255; b = 255; g = 255;
        } else {
            uint8_t desat = 255 - sat;
            desat = scale8_video( desat, desat);

            uint8_t satscale = 255 - desat;
     de2:	b5 2e       	mov	r11, r21
     de4:	b0 94       	com	r11
scale8_LEAVING_R1_DIRTY():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:199
        /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
        /* "clr __zero_reg__    \n\t" */
        : "+a" (i)      /* writes to i */
        : "a"  (scale)  /* uses scale */
        : "r0", "r1"    /* clobbers r0, r1 */
    );
     de6:	0b 2d       	mov	r16, r11
     de8:	20 9f       	mul	r18, r16
     dea:	02 0e       	add	r0, r18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	21 1d       	adc	r18, r1
     df0:	40 9f       	mul	r20, r16
     df2:	04 0e       	add	r0, r20
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	41 1d       	adc	r20, r1
     df8:	30 9f       	mul	r19, r16
     dfa:	03 0e       	add	r0, r19
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	31 1d       	adc	r19, r1
cleanup_R1():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:340
/// @ingroup ScalingDirty
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
     e00:	11 24       	eor	r1, r1
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:434
            if( r ) r = scale8( r, satscale) + 1;
            if( g ) g = scale8( g, satscale) + 1;
            if( b ) b = scale8( b, satscale) + 1;
#endif
            uint8_t brightness_floor = desat;
            r += brightness_floor;
     e02:	25 0f       	add	r18, r21
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:467
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
     e04:	20 83       	st	Z, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:435
            if( g ) g = scale8( g, satscale) + 1;
            if( b ) b = scale8( b, satscale) + 1;
#endif
            uint8_t brightness_floor = desat;
            r += brightness_floor;
            g += brightness_floor;
     e06:	45 0f       	add	r20, r21
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:468
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    rgb.g = g;
     e08:	41 83       	std	Z+1, r20	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:436
            if( b ) b = scale8( b, satscale) + 1;
#endif
            uint8_t brightness_floor = desat;
            r += brightness_floor;
            g += brightness_floor;
            b += brightness_floor;
     e0a:	35 0f       	add	r19, r21
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:469
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    rgb.g = g;
    rgb.b = b;
     e0c:	32 83       	std	Z+2, r19	; 0x02
fill_rainbow_circular():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/colorutils.cpp:83

    for (int i = 0; i < numToFill; ++i) {
        targetArray[i] = hsv;
        if (reversed) hueOffset -= hueChange;
        else hueOffset += hueChange;
     e0e:	84 53       	subi	r24, 0x34	; 52
     e10:	93 4f       	sbci	r25, 0xF3	; 243
     e12:	33 96       	adiw	r30, 0x03	; 3
C:\Users\user\Documents\Arduino\libraries\FastLED\src/colorutils.cpp:84
        hsv.hue = initialhue + (uint8_t)(hueOffset >> 8);  // assign new hue with precise offset (as 8-bit)
     e14:	47 2f       	mov	r20, r23
     e16:	49 0f       	add	r20, r25
C:\Users\user\Documents\Arduino\libraries\FastLED\src/colorutils.cpp:80
    hsv.sat = 240;

    const uint16_t hueChange = 65535 / (uint16_t)numToFill;  // hue change for each LED, * 256 for precision (256 * 256 - 1)
    uint16_t hueOffset = 0;  // offset for hue value, with precision (*256)

    for (int i = 0; i < numToFill; ++i) {
     e18:	80 3f       	cpi	r24, 0xF0	; 240
     e1a:	2f ef       	ldi	r18, 0xFF	; 255
     e1c:	92 07       	cpc	r25, r18
     e1e:	09 f0       	breq	.+2      	; 0xe22 <L_5390+0x40>
     e20:	b8 cf       	rjmp	.-144    	; 0xd92 <main+0x28e>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:152
		//FastLED.setBrightness(BRIGHTNESS);
		FastLED.show();
     e22:	b1 d9       	rcall	.-3230   	; 0x186 <CFastLED::show() [clone .constprop.13]>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:153
		iFrame += 10;
     e24:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
     e28:	86 5f       	subi	r24, 0xF6	; 246
     e2a:	8d cf       	rjmp	.-230    	; 0xd46 <main+0x242>
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:334
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
     e2c:	51 11       	cpse	r21, r1
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <L_5390+0x64>
scale8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:93
        "clr __zero_reg__    \n\t"

        : "+a" (i)      /* writes to i */
        : "a"  (scale)  /* uses scale */
        : "r0", "r1"    /* clobbers r0, r1 */
    );
     e30:	4a ea       	ldi	r20, 0xAA	; 170
     e32:	34 9f       	mul	r19, r20
     e34:	03 0e       	add	r0, r19
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	31 1d       	adc	r19, r1
     e3a:	11 24       	eor	r1, r1
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:340
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
     e3c:	01 2f       	mov	r16, r17
     e3e:	03 1b       	sub	r16, r19
     e40:	30 2f       	mov	r19, r16
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:341
                    g = K170 + third;
     e42:	42 0f       	add	r20, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:343
                    b = 0;
                    FORCE_REFERENCE(b);
     e44:	be cf       	rjmp	.-132    	; 0xdc2 <main+0x2be>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:356
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
                g = K255 - third;
     e46:	42 2f       	mov	r20, r18
     e48:	40 95       	com	r20
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:357
                b = third;
     e4a:	32 2f       	mov	r19, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:368
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	c0 cf       	rjmp	.-128    	; 0xdd0 <main+0x2cc>
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:363
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
     e50:	01 11       	cpse	r16, r1
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <L_5390+0x92>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:365
            // 10X
            if( ! ( hue & 0x20) ) {
     e54:	51 11       	cpse	r21, r1
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <L_5390+0x8a>
scale8():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/lib8tion/scale8.h:93
     e58:	2a ea       	ldi	r18, 0xAA	; 170
     e5a:	32 9f       	mul	r19, r18
     e5c:	03 0e       	add	r0, r19
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	31 1d       	adc	r19, r1
     e62:	11 24       	eor	r1, r1
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:372
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
     e64:	41 2f       	mov	r20, r17
     e66:	43 1b       	sub	r20, r19
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:373
                b = K85  + twothirds;
     e68:	3b 5a       	subi	r19, 0xAB	; 171
     e6a:	f0 cf       	rjmp	.-32     	; 0xe4c <L_5390+0x6a>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:381
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
     e6c:	32 2f       	mov	r19, r18
     e6e:	30 95       	com	r19
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:397
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	ae cf       	rjmp	.-164    	; 0xdd0 <main+0x2cc>
hsv2rgb_rainbow():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:385
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
     e74:	51 11       	cpse	r21, r1
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <L_5390+0xa2>
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:388
                // 110
                //case 6: // P -- K
                r = K85 + third;
     e78:	45 e5       	ldi	r20, 0x55	; 85
     e7a:	42 0f       	add	r20, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:391
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
     e7c:	31 2f       	mov	r19, r17
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:399
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
     e7e:	32 1b       	sub	r19, r18
main():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:396
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
     e80:	24 2f       	mov	r18, r20
     e82:	f6 cf       	rjmp	.-20     	; 0xe70 <L_5390+0x8e>
hsv2rgb_rainbow():
     e84:	4a ea       	ldi	r20, 0xAA	; 170
     e86:	42 0f       	add	r20, r18
C:\Users\user\Documents\Arduino\libraries\FastLED\src/hsv2rgb.cpp:399
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
     e88:	3b 2f       	mov	r19, r27
     e8a:	f9 cf       	rjmp	.-14     	; 0xe7e <L_5390+0x9c>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:157
		FrameDelay = 5;
	}
  	//////////////////// STATUS 9 ///////////////////////
  	else if(Status == 9)  {
     e8c:	89 30       	cpi	r24, 0x09	; 9
     e8e:	71 f5       	brne	.+92     	; 0xeec <L_5390+0x10a>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:158
		ColorLeds(CRGB::Blue);
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	7f dd       	rcall	.-1282   	; 0x996 <ColorLeds(CRGB)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:159
		for (iLed = iFrame; iLed < (iFrame + 5); iLed++) {
     e98:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <iFrame>
     e9c:	24 2f       	mov	r18, r20
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	2c 5f       	subi	r18, 0xFC	; 252
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	54 2f       	mov	r21, r20
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     ea6:	6f ef       	ldi	r22, 0xFF	; 255
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:159
     ea8:	85 2f       	mov	r24, r21
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	84 f0       	brlt	.+32     	; 0xed2 <L_5390+0xf0>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:160
			if(iLed < NUM_LEDS) {leds[iLed] = CRGB::Yellow;}
     eb2:	54 31       	cpi	r21, 0x14	; 20
     eb4:	60 f4       	brcc	.+24     	; 0xece <L_5390+0xec>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212
     eb6:	fc 01       	movw	r30, r24
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e8 0f       	add	r30, r24
     ebe:	f9 1f       	adc	r31, r25
     ec0:	e9 52       	subi	r30, 0x29	; 41
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 83       	st	Z, r22
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
     ec6:	61 83       	std	Z+1, r22	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
     ec8:	12 82       	std	Z+2, r1	; 0x02
     eca:	5f 5f       	subi	r21, 0xFF	; 255
     ecc:	ed cf       	rjmp	.-38     	; 0xea8 <L_5390+0xc6>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:161
			else                {leds[iLed - NUM_LEDS] = CRGB::Yellow;}
     ece:	44 97       	sbiw	r24, 0x14	; 20
     ed0:	f2 cf       	rjmp	.-28     	; 0xeb6 <L_5390+0xd4>
     ed2:	50 93 d6 00 	sts	0x00D6, r21	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:163
		}
		if  (iFrame == NUM_LEDS)        { iFrame = 0;}
     ed6:	44 31       	cpi	r20, 0x14	; 20
     ed8:	19 f4       	brne	.+6      	; 0xee0 <L_5390+0xfe>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:282
			ResetStatus = 0;
		}
		if(xFrame == 0)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) { leds[iLed] = CRGB(0,255,0); }
			xFrame++;
			iFrame = 0;
     eda:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:164
		for (iLed = iFrame; iLed < (iFrame + 5); iLed++) {
			if(iLed < NUM_LEDS) {leds[iLed] = CRGB::Yellow;}
			else                {leds[iLed - NUM_LEDS] = CRGB::Yellow;}
		}
		if  (iFrame == NUM_LEDS)        { iFrame = 0;}
		else                            { iFrame++; }
     ee0:	4f 5f       	subi	r20, 0xFF	; 255
     ee2:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:165
		FastLED.show();
     ee6:	4f d9       	rcall	.-3426   	; 0x186 <CFastLED::show() [clone .constprop.13]>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:166
		FrameDelay = 15;
     ee8:	8f e0       	ldi	r24, 0x0F	; 15
     eea:	f6 ce       	rjmp	.-532    	; 0xcd8 <main+0x1d4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:169
  	}	
  	//////////////////// STATUS 10 ///////////////////////
  	else if(Status == 10)  {
     eec:	8a 30       	cpi	r24, 0x0A	; 10
     eee:	41 f5       	brne	.+80     	; 0xf40 <L_5390+0x15e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:170
    	if(iFrame == 0) {
     ef0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
     ef4:	81 11       	cpse	r24, r1
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <L_5390+0x11c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:171
			ColorLeds(CRGB::Black);
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	4c dd       	rcall	.-1384   	; 0x996 <ColorLeds(CRGB)>
random():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/WMath.cpp:40
     efe:	b0 d4       	rcall	.+2400   	; 0x1860 <random>
     f00:	2b 01       	movw	r4, r22
     f02:	3c 01       	movw	r6, r24
     f04:	ad d4       	rcall	.+2394   	; 0x1860 <random>
     f06:	24 e1       	ldi	r18, 0x14	; 20
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	fd d4       	rcall	.+2554   	; 0x190a <__divmodsi4>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:183
  	else if(Status == 11)  {
    	if(iFrame == 0) {
			ColorLeds(CRGB::Black);
		}
		iFrame = 1;
		leds[random(NUM_LEDS)] = CRGB(0, 0, random(255)); 
     f10:	5b 01       	movw	r10, r22
     f12:	aa 0c       	add	r10, r10
     f14:	bb 1c       	adc	r11, r11
     f16:	6a 0d       	add	r22, r10
     f18:	7b 1d       	adc	r23, r11
     f1a:	ab 01       	movw	r20, r22
     f1c:	49 52       	subi	r20, 0x29	; 41
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	5a 01       	movw	r10, r20
     f22:	da 01       	movw	r26, r20
     f24:	1c 92       	st	X, r1
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	1c 92       	st	X, r1
random():
C:\Users\user\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.0\cores\MCUdude_corefiles/WMath.cpp:40
     f2a:	c3 01       	movw	r24, r6
     f2c:	b2 01       	movw	r22, r4
     f2e:	a7 01       	movw	r20, r14
     f30:	96 01       	movw	r18, r12
     f32:	eb d4       	rcall	.+2518   	; 0x190a <__divmodsi4>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:183
     f34:	f5 01       	movw	r30, r10
     f36:	62 83       	std	Z+2, r22	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:184
		FrameDelay = 10;
     f38:	8a e0       	ldi	r24, 0x0A	; 10
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:247
		else	{
			for (iLed=NUM_LEDS - 1; iLed > iFrame; iLed--) { leds[iLed] = CRGB::Yellow; }
			leds[iFrame] = CRGB::Blue;
			iFrame--;
		}
		FrameDelay = 5;
     f3a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <FrameDelay>
     f3e:	5f c0       	rjmp	.+190    	; 0xffe <L_5390+0x21c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:178
		leds[random(NUM_LEDS)] = CRGB(0, 0, random(255)); 
		FrameDelay = 10;
		FastLED.show();
  	}
  	//////////////////// STATUS 11 ///////////////////////
  	else if(Status == 11)  {
     f40:	8b 30       	cpi	r24, 0x0B	; 11
     f42:	51 f4       	brne	.+20     	; 0xf58 <L_5390+0x176>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:179
    	if(iFrame == 0) {
     f44:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
     f48:	81 11       	cpse	r24, r1
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <L_5390+0x170>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:180
			ColorLeds(CRGB::Black);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	22 dd       	rcall	.-1468   	; 0x996 <ColorLeds(CRGB)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:182
		}
		iFrame = 1;
     f52:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <iFrame>
     f56:	d3 cf       	rjmp	.-90     	; 0xefe <L_5390+0x11c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:188
		leds[random(NUM_LEDS)] = CRGB(0, 0, random(255)); 
		FrameDelay = 10;
		FastLED.show();
  	}
	//////////////////// STATUS 12 ///////////////////////
	else if(Status == 12)  {
     f58:	8c 30       	cpi	r24, 0x0C	; 12
     f5a:	09 f0       	breq	.+2      	; 0xf5e <L_5390+0x17c>
     f5c:	5b c0       	rjmp	.+182    	; 0x1014 <L_5390+0x232>
     f5e:	e7 ed       	ldi	r30, 0xD7	; 215
     f60:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:189
		for (iLed = 0; iLed<NUM_LEDS; iLed++) { leds[iLed] = CRGB::Black; }
     f62:	85 e1       	ldi	r24, 0x15	; 21
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	29 f0       	breq	.+10     	; 0xf72 <L_5390+0x190>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     f68:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
     f6a:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
     f6c:	12 82       	std	Z+2, r1	; 0x02
     f6e:	33 96       	adiw	r30, 0x03	; 3
     f70:	f9 cf       	rjmp	.-14     	; 0xf64 <L_5390+0x182>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:190
		for (iLed = iFrame; iLed < (iFrame + 2); iLed++) { leds[iLed] = CRGB::Blue;}
     f72:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <iFrame>
     f76:	ba 2f       	mov	r27, r26
     f78:	2a 2f       	mov	r18, r26
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	b9 01       	movw	r22, r18
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
     f82:	bb 24       	eor	r11, r11
     f84:	ba 94       	dec	r11
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:190
     f86:	8b 2f       	mov	r24, r27
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	bf 5f       	subi	r27, 0xFF	; 255
     f8c:	68 17       	cp	r22, r24
     f8e:	79 07       	cpc	r23, r25
     f90:	64 f0       	brlt	.+24     	; 0xfaa <L_5390+0x1c8>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     f92:	ac 01       	movw	r20, r24
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	fc 01       	movw	r30, r24
     f9e:	e9 52       	subi	r30, 0x29	; 41
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
     fa4:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
     fa6:	b2 82       	std	Z+2, r11	; 0x02
     fa8:	ee cf       	rjmp	.-36     	; 0xf86 <L_5390+0x1a4>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:191
		for (iLed = NUM_LEDS - 1 - iFrame; iLed > (NUM_LEDS - 3 - iFrame); iLed--) { leds[iLed] = CRGB::Blue;}
     faa:	83 e1       	ldi	r24, 0x13	; 19
     fac:	8a 1b       	sub	r24, r26
     fae:	41 e1       	ldi	r20, 0x11	; 17
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	42 1b       	sub	r20, r18
     fb4:	53 0b       	sbc	r21, r19
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
     fb6:	7f ef       	ldi	r23, 0xFF	; 255
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:191
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	6f ef       	ldi	r22, 0xFF	; 255
     fbe:	68 0f       	add	r22, r24
     fc0:	42 17       	cp	r20, r18
     fc2:	53 07       	cpc	r21, r19
     fc4:	6c f4       	brge	.+26     	; 0xfe0 <L_5390+0x1fe>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     fc6:	c9 01       	movw	r24, r18
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	fc 01       	movw	r30, r24
     fd2:	e9 52       	subi	r30, 0x29	; 41
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
     fd8:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
     fda:	72 83       	std	Z+2, r23	; 0x02
     fdc:	86 2f       	mov	r24, r22
     fde:	ec cf       	rjmp	.-40     	; 0xfb8 <L_5390+0x1d6>
     fe0:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:192
		if			(iFrame + 2 == NUM_LEDS/2)	CountDir = CountDown;
     fe4:	a8 30       	cpi	r26, 0x08	; 8
     fe6:	69 f4       	brne	.+26     	; 0x1002 <L_5390+0x220>
     fe8:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <CountDir>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:194
		else if		(iFrame == 0)				CountDir = CountUp;
		if(CountDir == CountUp)	{
     fec:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <CountDir>
     ff0:	81 11       	cpse	r24, r1
     ff2:	0c c0       	rjmp	.+24     	; 0x100c <L_5390+0x22a>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:195
			iFrame += 1;
     ff4:	af 5f       	subi	r26, 0xFF	; 255
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:198
		}
		else if(CountDir == CountDown)	{
			iFrame -= 1;
     ff6:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:200
		}
		FrameDelay = 20;
     ffa:	d0 93 17 01 	sts	0x0117, r29	; 0x800117 <FrameDelay>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:248
			for (iLed=NUM_LEDS - 1; iLed > iFrame; iLed--) { leds[iLed] = CRGB::Yellow; }
			leds[iFrame] = CRGB::Blue;
			iFrame--;
		}
		FrameDelay = 5;
		FastLED.show();
     ffe:	c3 d8       	rcall	.-3706   	; 0x186 <CFastLED::show() [clone .constprop.13]>
    1000:	6d ce       	rjmp	.-806    	; 0xcdc <main+0x1d8>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:193
	else if(Status == 12)  {
		for (iLed = 0; iLed<NUM_LEDS; iLed++) { leds[iLed] = CRGB::Black; }
		for (iLed = iFrame; iLed < (iFrame + 2); iLed++) { leds[iLed] = CRGB::Blue;}
		for (iLed = NUM_LEDS - 1 - iFrame; iLed > (NUM_LEDS - 3 - iFrame); iLed--) { leds[iLed] = CRGB::Blue;}
		if			(iFrame + 2 == NUM_LEDS/2)	CountDir = CountDown;
		else if		(iFrame == 0)				CountDir = CountUp;
    1002:	a1 11       	cpse	r26, r1
    1004:	f3 cf       	rjmp	.-26     	; 0xfec <L_5390+0x20a>
    1006:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <CountDir>
    100a:	f0 cf       	rjmp	.-32     	; 0xfec <L_5390+0x20a>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:197
		if(CountDir == CountUp)	{
			iFrame += 1;
		}
		else if(CountDir == CountDown)	{
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a9 f7       	brne	.-22     	; 0xffa <L_5390+0x218>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:198
			iFrame -= 1;
    1010:	a1 50       	subi	r26, 0x01	; 1
    1012:	f1 cf       	rjmp	.-30     	; 0xff6 <L_5390+0x214>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:204
		}
		FrameDelay = 20;
		FastLED.show();
  	}
	//////////////////// STATUS 13 ///////////////////////
	else if(Status == 13)  {
    1014:	8d 30       	cpi	r24, 0x0D	; 13
    1016:	09 f0       	breq	.+2      	; 0x101a <L_5390+0x238>
    1018:	b9 c0       	rjmp	.+370    	; 0x118c <L_5390+0x3aa>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:205
		if(ResetStatus == 1) {	
    101a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ResetStatus>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	61 f4       	brne	.+24     	; 0x103a <L_5390+0x258>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:206
			ColorLeds(CRGB::Blue);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	b6 dc       	rcall	.-1684   	; 0x996 <ColorLeds(CRGB)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:207
			xFrame = NUM_LEDS;
    102a:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <xFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:208
			iFrame = 0;
    102e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:209
			CountDir = CountUp;
    1032:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <CountDir>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:210
			ResetStatus = 0;
    1036:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ResetStatus>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:212
		}
		if(xFrame == 255)	{
    103a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <xFrame>
    103e:	2f 3f       	cpi	r18, 0xFF	; 255
    1040:	a9 f4       	brne	.+42     	; 0x106c <L_5390+0x28a>
    1042:	e7 ed       	ldi	r30, 0xD7	; 215
    1044:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:213
			for (iLed=0; iLed < NUM_LEDS; iLed++) 	{ leds[iLed] = CRGB::Yellow;}
    1046:	85 e1       	ldi	r24, 0x15	; 21
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	81 50       	subi	r24, 0x01	; 1
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:213
    104c:	29 f0       	breq	.+10     	; 0x1058 <L_5390+0x276>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212
    104e:	90 83       	st	Z, r25
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    1050:	91 83       	std	Z+1, r25	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1052:	12 82       	std	Z+2, r1	; 0x02
    1054:	33 96       	adiw	r30, 0x03	; 3
    1056:	f9 cf       	rjmp	.-14     	; 0x104a <L_5390+0x268>
    1058:	d0 93 d6 00 	sts	0x00D6, r29	; 0x8000d6 <iLed>
loop():
			CountDir = CountDown;
    105c:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <CountDir>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:215
			xFrame = 0;
    1060:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <xFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:234
				iFrame = 0;
			}
			else{
				leds[iFrame] = CRGB::Blue;
				xFrame = xFrame + 1;
				iFrame = NUM_LEDS - 1;
    1064:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:245
			iFrame++;
		}
		else	{
			for (iLed=NUM_LEDS - 1; iLed > iFrame; iLed--) { leds[iLed] = CRGB::Yellow; }
			leds[iFrame] = CRGB::Blue;
			iFrame--;
    1066:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <iFrame>
    106a:	16 c0       	rjmp	.+44     	; 0x1098 <L_5390+0x2b6>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:218
			for (iLed=0; iLed < NUM_LEDS; iLed++) 	{ leds[iLed] = CRGB::Yellow;}
			CountDir = CountDown;
			xFrame = 0;
			iFrame = NUM_LEDS - 1;
		}
		else if(xFrame == NUM_LEDS)	{
    106c:	24 31       	cpi	r18, 0x14	; 20
    106e:	b1 f4       	brne	.+44     	; 0x109c <L_5390+0x2ba>
    1070:	e7 ed       	ldi	r30, 0xD7	; 215
    1072:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:219
			for (iLed=0; iLed < NUM_LEDS; iLed++) 	{ leds[iLed] = CRGB::Blue;}
    1074:	85 e1       	ldi	r24, 0x15	; 21
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	81 50       	subi	r24, 0x01	; 1
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:219
    107a:	29 f0       	breq	.+10     	; 0x1086 <L_5390+0x2a4>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    107c:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    107e:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1080:	92 83       	std	Z+2, r25	; 0x02
    1082:	33 96       	adiw	r30, 0x03	; 3
    1084:	f9 cf       	rjmp	.-14     	; 0x1078 <L_5390+0x296>
    1086:	d0 93 d6 00 	sts	0x00D6, r29	; 0x8000d6 <iLed>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:220
			CountDir = CountUp;
    108a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <CountDir>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:221
			xFrame = NUM_LEDS - 1;
    108e:	83 e1       	ldi	r24, 0x13	; 19
    1090:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:229
		else if(iFrame == xFrame)	{
			for (iLed=0; iLed < iFrame; iLed++) 	{ leds[iLed] = CRGB::Blue;}
			for (; iLed < NUM_LEDS; iLed++) 		{ leds[iLed] = CRGB::Yellow;}	
			if(CountDir == CountUp)	{
				xFrame = xFrame - 1;
				iFrame = 0;
    1094:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:247
		else	{
			for (iLed=NUM_LEDS - 1; iLed > iFrame; iLed--) { leds[iLed] = CRGB::Yellow; }
			leds[iFrame] = CRGB::Blue;
			iFrame--;
		}
		FrameDelay = 5;
    1098:	85 e0       	ldi	r24, 0x05	; 5
    109a:	4f cf       	rjmp	.-354    	; 0xf3a <L_5390+0x158>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:224
			for (iLed=0; iLed < NUM_LEDS; iLed++) 	{ leds[iLed] = CRGB::Blue;}
			CountDir = CountUp;
			xFrame = NUM_LEDS - 1;
			iFrame = 0;
		}	
		else if(iFrame == xFrame)	{
    109c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    10a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <CountDir>
    10a4:	e7 ed       	ldi	r30, 0xD7	; 215
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	28 13       	cpse	r18, r24
    10aa:	33 c0       	rjmp	.+102    	; 0x1112 <L_5390+0x330>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:225
			for (iLed=0; iLed < iFrame; iLed++) 	{ leds[iLed] = CRGB::Blue;}
    10ac:	40 e0       	ldi	r20, 0x00	; 0
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:225
    10b0:	84 13       	cpse	r24, r20
    10b2:	10 c0       	rjmp	.+32     	; 0x10d4 <L_5390+0x2f2>
    10b4:	03 e0       	ldi	r16, 0x03	; 3
    10b6:	80 9f       	mul	r24, r16
    10b8:	f0 01       	movw	r30, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	e9 52       	subi	r30, 0x29	; 41
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	28 2f       	mov	r18, r24
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:226
			for (; iLed < NUM_LEDS; iLed++) 		{ leds[iLed] = CRGB::Yellow;}	
    10c4:	24 31       	cpi	r18, 0x14	; 20
    10c6:	60 f4       	brcc	.+24     	; 0x10e0 <L_5390+0x2fe>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212
    10c8:	30 83       	st	Z, r19
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    10ca:	31 83       	std	Z+1, r19	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    10cc:	12 82       	std	Z+2, r1	; 0x02
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:226
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	33 96       	adiw	r30, 0x03	; 3
    10d2:	f8 cf       	rjmp	.-16     	; 0x10c4 <L_5390+0x2e2>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    10d4:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    10d6:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    10d8:	22 83       	std	Z+2, r18	; 0x02
    10da:	4f 5f       	subi	r20, 0xFF	; 255
    10dc:	33 96       	adiw	r30, 0x03	; 3
    10de:	e8 cf       	rjmp	.-48     	; 0x10b0 <L_5390+0x2ce>
    10e0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <iLed>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:227
			if(CountDir == CountUp)	{
    10e4:	91 11       	cpse	r25, r1
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <L_5390+0x30e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:228
				xFrame = xFrame - 1;
    10e8:	41 50       	subi	r20, 0x01	; 1
    10ea:	40 93 15 01 	sts	0x0115, r20	; 0x800115 <xFrame>
    10ee:	d2 cf       	rjmp	.-92     	; 0x1094 <L_5390+0x2b2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:232
				iFrame = 0;
			}
			else{
				leds[iFrame] = CRGB::Blue;
    10f0:	90 e0       	ldi	r25, 0x00	; 0
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    10f2:	9c 01       	movw	r18, r24
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	fc 01       	movw	r30, r24
    10fe:	e9 52       	subi	r30, 0x29	; 41
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    1104:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	82 83       	std	Z+2, r24	; 0x02
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:233
				xFrame = xFrame + 1;
    110a:	4f 5f       	subi	r20, 0xFF	; 255
    110c:	40 93 15 01 	sts	0x0115, r20	; 0x800115 <xFrame>
    1110:	a9 cf       	rjmp	.-174    	; 0x1064 <L_5390+0x282>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:237
				iFrame = NUM_LEDS - 1;
			}
		}
		else if(CountDir == CountUp)	{
    1112:	91 11       	cpse	r25, r1
    1114:	1b c0       	rjmp	.+54     	; 0x114c <L_5390+0x36a>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
    1116:	2f ef       	ldi	r18, 0xFF	; 255
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:238
			for (iLed=0; iLed < iFrame; iLed++) { leds[iLed] = CRGB::Blue;	}
    1118:	89 17       	cp	r24, r25
    111a:	31 f0       	breq	.+12     	; 0x1128 <L_5390+0x346>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    111c:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    111e:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1120:	22 83       	std	Z+2, r18	; 0x02
    1122:	9f 5f       	subi	r25, 0xFF	; 255
    1124:	33 96       	adiw	r30, 0x03	; 3
    1126:	f8 cf       	rjmp	.-16     	; 0x1118 <L_5390+0x336>
    1128:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:239
			leds[iFrame] = CRGB::Yellow;	
    112c:	48 2f       	mov	r20, r24
    112e:	50 e0       	ldi	r21, 0x00	; 0
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1130:	9a 01       	movw	r18, r20
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	24 0f       	add	r18, r20
    1138:	35 1f       	adc	r19, r21
    113a:	f9 01       	movw	r30, r18
    113c:	e9 52       	subi	r30, 0x29	; 41
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	90 83       	st	Z, r25
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    1144:	91 83       	std	Z+1, r25	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1146:	12 82       	std	Z+2, r1	; 0x02
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:240
			iFrame++;
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	8d cf       	rjmp	.-230    	; 0x1066 <L_5390+0x284>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:243
		}
		else	{
			for (iLed=NUM_LEDS - 1; iLed > iFrame; iLed--) { leds[iLed] = CRGB::Yellow; }
    114c:	93 e1       	ldi	r25, 0x13	; 19
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	33 97       	sbiw	r30, 0x03	; 3
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:243
    1152:	89 17       	cp	r24, r25
    1154:	28 f4       	brcc	.+10     	; 0x1160 <L_5390+0x37e>
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212
    1156:	24 af       	std	Z+60, r18	; 0x3c
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    1158:	25 af       	std	Z+61, r18	; 0x3d
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    115a:	16 ae       	std	Z+62, r1	; 0x3e
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	f8 cf       	rjmp	.-16     	; 0x1150 <L_5390+0x36e>
    1160:	98 2f       	mov	r25, r24
    1162:	84 31       	cpi	r24, 0x14	; 20
    1164:	08 f0       	brcs	.+2      	; 0x1168 <L_5390+0x386>
    1166:	93 e1       	ldi	r25, 0x13	; 19
    1168:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:244
			leds[iFrame] = CRGB::Blue;
    116c:	48 2f       	mov	r20, r24
    116e:	50 e0       	ldi	r21, 0x00	; 0
_ZN4CRGBaSEm():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:212

    /// Allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1170:	9a 01       	movw	r18, r20
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	24 0f       	add	r18, r20
    1178:	35 1f       	adc	r19, r21
    117a:	f9 01       	movw	r30, r18
    117c:	e9 52       	subi	r30, 0x29	; 41
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	10 82       	st	Z, r1
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:213
        g = (colorcode >>  8) & 0xFF;
    1182:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/pixeltypes.h:214
        b = (colorcode >>  0) & 0xFF;
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	92 83       	std	Z+2, r25	; 0x02
loop():
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:245
			iFrame--;
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	6d cf       	rjmp	.-294    	; 0x1066 <L_5390+0x284>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:251
		}
		FrameDelay = 5;
		FastLED.show();
  	}	
  	//////////////////// STATUS 14 ///////////////////////
  	else if(Status == 14)  {
    118c:	8e 30       	cpi	r24, 0x0E	; 14
    118e:	39 f5       	brne	.+78     	; 0x11de <L_5390+0x3fc>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:253
		for (iLed=0; iLed<NUM_LEDS; iLed++) {
			if(iLed + iFrame >= NUM_LEDS)	{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame - NUM_LEDS]);}
    1190:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <iFrame>
    1194:	e7 ed       	ldi	r30, 0xD7	; 215
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	46 2f       	mov	r20, r22
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	ca 01       	movw	r24, r20
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	84 31       	cpi	r24, 0x14	; 20
    11a8:	91 05       	cpc	r25, r1
    11aa:	b0 f0       	brcs	.+44     	; 0x11d8 <L_5390+0x3f6>
    11ac:	89 58       	subi	r24, 0x89	; 137
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:254
			else									{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame]);} 
    11b0:	dc 01       	movw	r26, r24
    11b2:	8c 91       	ld	r24, X
    11b4:	10 82       	st	Z, r1
    11b6:	11 82       	std	Z+1, r1	; 0x01
    11b8:	82 83       	std	Z+2, r24	; 0x02
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	33 96       	adiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:252
		FrameDelay = 5;
		FastLED.show();
  	}	
  	//////////////////// STATUS 14 ///////////////////////
  	else if(Status == 14)  {
		for (iLed=0; iLed<NUM_LEDS; iLed++) {
    11c0:	24 31       	cpi	r18, 0x14	; 20
    11c2:	31 05       	cpc	r19, r1
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <L_5390+0x3be>
    11c6:	d0 93 d6 00 	sts	0x00D6, r29	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:256
			if(iLed + iFrame >= NUM_LEDS)	{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame - NUM_LEDS]);}
			else									{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame]);} 
		}
		if  (iFrame == NUM_LEDS - 1)    { iFrame = 0;}
    11ca:	63 31       	cpi	r22, 0x13	; 19
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <L_5390+0x3ee>
    11ce:	85 ce       	rjmp	.-758    	; 0xeda <L_5390+0xf8>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:257
		else                            { iFrame++; }
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <iFrame>
    11d6:	87 ce       	rjmp	.-754    	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:254
  	}	
  	//////////////////// STATUS 14 ///////////////////////
  	else if(Status == 14)  {
		for (iLed=0; iLed<NUM_LEDS; iLed++) {
			if(iLed + iFrame >= NUM_LEDS)	{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame - NUM_LEDS]);}
			else									{ leds[iLed] = CRGB(0, 0, Tri[iLed + iFrame]);} 
    11d8:	85 57       	subi	r24, 0x75	; 117
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	e9 cf       	rjmp	.-46     	; 0x11b0 <L_5390+0x3ce>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:262
		else                            { iFrame++; }
		FastLED.show();
		FrameDelay = 15;
  	}
  	//////////////////// STATUS 15 ///////////////////////
  	else if(Status == 15)  {
    11de:	8f 30       	cpi	r24, 0x0F	; 15
    11e0:	f1 f4       	brne	.+60     	; 0x121e <L_5390+0x43c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:263
		if(ResetStatus)	{
    11e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ResetStatus>
    11e6:	88 23       	and	r24, r24
    11e8:	79 f0       	breq	.+30     	; 0x1208 <L_5390+0x426>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:264
			for(Vect[0] = 0, i=1; i < NUM_LEDS; i++)	{ Vect[i] = Vect[i-1]+255/NUM_LEDS;};
    11ea:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <Vect>
    11ee:	e2 ec       	ldi	r30, 0xC2	; 194
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	94 e1       	ldi	r25, 0x14	; 20
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	21 f0       	breq	.+8      	; 0x1200 <L_5390+0x41e>
    11f8:	81 91       	ld	r24, Z+
    11fa:	84 5f       	subi	r24, 0xF4	; 244
    11fc:	80 83       	st	Z, r24
    11fe:	fa cf       	rjmp	.-12     	; 0x11f4 <L_5390+0x412>
    1200:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <i>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:265
			ResetStatus = 0;
    1204:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ResetStatus>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:447
		Vect[3] = 255;
		Vect[NUM_LEDS/2] = 255;
		Vect[NUM_LEDS/2 + 1] = 255;
		Vect[NUM_LEDS/2 + 2] = 255;
		Vect[NUM_LEDS/2 + 3] = 255;
		ShiftLed(BlueDD);
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	e4 db       	rcall	.-2104   	; 0x9d4 <ShiftLed(unsigned char)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:448
		if  (iFrame == NUM_LEDS - 1)    { iFrame = 0;}
    120c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    1210:	83 31       	cpi	r24, 0x13	; 19
    1212:	09 f4       	brne	.+2      	; 0x1216 <L_5390+0x434>
    1214:	62 ce       	rjmp	.-828    	; 0xeda <L_5390+0xf8>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:449
		else                            { iFrame++; }
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <iFrame>
    121c:	64 ce       	rjmp	.-824    	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:274
		else                            { iFrame++; }
		FastLED.show();
		FrameDelay = 15;
  	}
  	//////////////////// STATUS 16 ///////////////////////
  	else if(Status == 16)  {
    121e:	80 31       	cpi	r24, 0x10	; 16
    1220:	09 f0       	breq	.+2      	; 0x1224 <L_5390+0x442>
    1222:	75 c2       	rjmp	.+1258   	; 0x170e <L_5390+0x92c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:275
		if(ResetStatus)	{
    1224:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ResetStatus>
    1228:	88 23       	and	r24, r24
    122a:	79 f0       	breq	.+30     	; 0x124a <L_5390+0x468>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:276
			for(Vect[0] = 0, i=1; i < NUM_LEDS; i++)	{ Vect[i] = Vect[i-1]+255/NUM_LEDS;};
    122c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <Vect>
    1230:	e2 ec       	ldi	r30, 0xC2	; 194
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	94 e1       	ldi	r25, 0x14	; 20
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	21 f0       	breq	.+8      	; 0x1242 <L_5390+0x460>
    123a:	81 91       	ld	r24, Z+
    123c:	84 5f       	subi	r24, 0xF4	; 244
    123e:	80 83       	st	Z, r24
    1240:	fa cf       	rjmp	.-12     	; 0x1236 <L_5390+0x454>
    1242:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <i>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:277
			ResetStatus = 0;
    1246:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ResetStatus>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:279
		}
		if(xFrame == 0)	{
    124a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xFrame>
    124e:	81 11       	cpse	r24, r1
    1250:	16 c0       	rjmp	.+44     	; 0x127e <L_5390+0x49c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:280
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) { leds[iLed] = CRGB(0,255,0); }
    1252:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    1256:	e7 ed       	ldi	r30, 0xD7	; 215
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	93 e1       	ldi	r25, 0x13	; 19
    125c:	2f ef       	ldi	r18, 0xFF	; 255
    125e:	33 97       	sbiw	r30, 0x03	; 3
    1260:	89 17       	cp	r24, r25
    1262:	28 f4       	brcc	.+10     	; 0x126e <L_5390+0x48c>
    1264:	14 ae       	std	Z+60, r1	; 0x3c
    1266:	25 af       	std	Z+61, r18	; 0x3d
    1268:	16 ae       	std	Z+62, r1	; 0x3e
    126a:	91 50       	subi	r25, 0x01	; 1
    126c:	f8 cf       	rjmp	.-16     	; 0x125e <L_5390+0x47c>
    126e:	84 31       	cpi	r24, 0x14	; 20
    1270:	08 f0       	brcs	.+2      	; 0x1274 <L_5390+0x492>
    1272:	83 e1       	ldi	r24, 0x13	; 19
    1274:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:281
			xFrame++;
    1278:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <xFrame>
    127c:	2e ce       	rjmp	.-932    	; 0xeda <L_5390+0xf8>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:285
			iFrame = 0;
		}
		//Fade Blue
		else if(xFrame ==1)	{
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	89 f5       	brne	.+98     	; 0x12e4 <L_5390+0x502>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:286
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1282:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    1286:	e7 ed       	ldi	r30, 0xD7	; 215
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:287
				leds[iLed] = CRGB(0,255,0);
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:286
			xFrame++;
			iFrame = 0;
		}
		//Fade Blue
		else if(xFrame ==1)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1290:	28 17       	cp	r18, r24
    1292:	18 f1       	brcs	.+70     	; 0x12da <L_5390+0x4f8>
    1294:	32 2f       	mov	r19, r18
    1296:	24 31       	cpi	r18, 0x14	; 20
    1298:	08 f0       	brcs	.+2      	; 0x129c <L_5390+0x4ba>
    129a:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:290
				leds[iLed] = CRGB(0,255,0);
			}		
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(0, 255, Vect[iFrame - iLed]);
    129c:	82 2f       	mov	r24, r18
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	53 e0       	ldi	r21, 0x03	; 3
    12a2:	4f ef       	ldi	r20, 0xFF	; 255
    12a4:	fc 01       	movw	r30, r24
    12a6:	e3 1b       	sub	r30, r19
    12a8:	f1 09       	sbc	r31, r1
    12aa:	ee 53       	subi	r30, 0x3E	; 62
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	35 9f       	mul	r19, r21
    12b2:	f0 01       	movw	r30, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	e9 52       	subi	r30, 0x29	; 41
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	10 82       	st	Z, r1
    12bc:	41 83       	std	Z+1, r20	; 0x01
    12be:	62 83       	std	Z+2, r22	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:289
		//Fade Blue
		else if(xFrame ==1)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0,255,0);
			}		
			for (;iLed != 255; iLed--) {
    12c0:	31 50       	subi	r19, 0x01	; 1
    12c2:	80 f7       	brcc	.-32     	; 0x12a4 <L_5390+0x4c2>
    12c4:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:292
				leds[iLed] = CRGB(0, 255, Vect[iFrame - iLed]);
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    12c8:	23 31       	cpi	r18, 0x13	; 19
    12ca:	09 f0       	breq	.+2      	; 0x12ce <L_5390+0x4ec>
    12cc:	eb c1       	rjmp	.+982    	; 0x16a4 <L_5390+0x8c2>
    12ce:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    12d2:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:402
				leds[iLed] = CRGB(255, 255, 0);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iFrame + iLed], 255, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    12d4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xFrame>
    12d8:	06 ce       	rjmp	.-1012   	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:287
			iFrame = 0;
		}
		//Fade Blue
		else if(xFrame ==1)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0,255,0);
    12da:	14 ae       	std	Z+60, r1	; 0x3c
    12dc:	95 af       	std	Z+61, r25	; 0x3d
    12de:	16 ae       	std	Z+62, r1	; 0x3e
    12e0:	81 50       	subi	r24, 0x01	; 1
    12e2:	d5 cf       	rjmp	.-86     	; 0x128e <L_5390+0x4ac>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:296
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fill Blue
		else if(xFrame == 2)	{
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	69 f5       	brne	.+90     	; 0x1342 <L_5390+0x560>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:297
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    12e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    12ec:	a8 2f       	mov	r26, r24
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ae 53       	subi	r26, 0x3E	; 62
    12f2:	bf 4f       	sbci	r27, 0xFF	; 255
    12f4:	e7 ed       	ldi	r30, 0xD7	; 215
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:298
				leds[iLed] = CRGB(0, 255, Vect[NUM_LEDS - 1 - iLed + iFrame]);
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:297
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fill Blue
		else if(xFrame == 2)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    12fe:	89 17       	cp	r24, r25
    1300:	d0 f0       	brcs	.+52     	; 0x1336 <L_5390+0x554>
    1302:	98 2f       	mov	r25, r24
    1304:	84 31       	cpi	r24, 0x14	; 20
    1306:	08 f0       	brcs	.+2      	; 0x130a <L_5390+0x528>
    1308:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:301
				leds[iLed] = CRGB(0, 255, Vect[NUM_LEDS - 1 - iLed + iFrame]);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(0, 255, 255);
    130a:	23 e0       	ldi	r18, 0x03	; 3
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	92 9f       	mul	r25, r18
    1310:	f0 01       	movw	r30, r0
    1312:	11 24       	eor	r1, r1
    1314:	e9 52       	subi	r30, 0x29	; 41
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	10 82       	st	Z, r1
    131a:	31 83       	std	Z+1, r19	; 0x01
    131c:	32 83       	std	Z+2, r19	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:300
		//Fill Blue
		else if(xFrame == 2)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, 255, Vect[NUM_LEDS - 1 - iLed + iFrame]);
			}
			for (;iLed != 255; iLed--) {
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	b0 f7       	brcc	.-20     	; 0x130e <L_5390+0x52c>
    1322:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:303
				leds[iLed] = CRGB(0, 255, 255);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    1326:	83 31       	cpi	r24, 0x13	; 19
    1328:	09 f0       	breq	.+2      	; 0x132c <L_5390+0x54a>
    132a:	75 cf       	rjmp	.-278    	; 0x1216 <L_5390+0x434>
    132c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1330:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <xFrame>
    1334:	d8 cd       	rjmp	.-1104   	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:298
			else						{iFrame++;}		
		}
		//Fill Blue
		else if(xFrame == 2)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, 255, Vect[NUM_LEDS - 1 - iLed + iFrame]);
    1336:	2d 91       	ld	r18, X+
    1338:	14 ae       	std	Z+60, r1	; 0x3c
    133a:	35 af       	std	Z+61, r19	; 0x3d
    133c:	26 af       	std	Z+62, r18	; 0x3e
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	dd cf       	rjmp	.-70     	; 0x12fc <L_5390+0x51a>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:307
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade Green out
		else if(xFrame == 3)	{
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	81 f5       	brne	.+96     	; 0x13a6 <L_5390+0x5c4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:308
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1346:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    134a:	e7 ed       	ldi	r30, 0xD7	; 215
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:309
				leds[iLed] = CRGB(0, 255, 255);
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:308
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade Green out
		else if(xFrame == 3)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1354:	28 17       	cp	r18, r24
    1356:	10 f1       	brcs	.+68     	; 0x139c <L_5390+0x5ba>
    1358:	32 2f       	mov	r19, r18
    135a:	24 31       	cpi	r18, 0x14	; 20
    135c:	08 f0       	brcs	.+2      	; 0x1360 <L_5390+0x57e>
    135e:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:312
				leds[iLed] = CRGB(0, 255, 255);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(0, Vect[NUM_LEDS - 1 - iFrame + iLed], 255);
    1360:	c4 01       	movw	r24, r8
    1362:	82 1b       	sub	r24, r18
    1364:	91 09       	sbc	r25, r1
    1366:	8e 53       	subi	r24, 0x3E	; 62
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	53 e0       	ldi	r21, 0x03	; 3
    136c:	4f ef       	ldi	r20, 0xFF	; 255
    136e:	fc 01       	movw	r30, r24
    1370:	e3 0f       	add	r30, r19
    1372:	f1 1d       	adc	r31, r1
    1374:	60 81       	ld	r22, Z
    1376:	35 9f       	mul	r19, r21
    1378:	f0 01       	movw	r30, r0
    137a:	11 24       	eor	r1, r1
    137c:	e9 52       	subi	r30, 0x29	; 41
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	10 82       	st	Z, r1
    1382:	61 83       	std	Z+1, r22	; 0x01
    1384:	42 83       	std	Z+2, r20	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:311
		//Fade Green out
		else if(xFrame == 3)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, 255, 255);
			}
			for (;iLed != 255; iLed--) {
    1386:	31 50       	subi	r19, 0x01	; 1
    1388:	90 f7       	brcc	.-28     	; 0x136e <L_5390+0x58c>
    138a:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:314
				leds[iLed] = CRGB(0, Vect[NUM_LEDS - 1 - iFrame + iLed], 255);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    138e:	23 31       	cpi	r18, 0x13	; 19
    1390:	09 f0       	breq	.+2      	; 0x1394 <L_5390+0x5b2>
    1392:	88 c1       	rjmp	.+784    	; 0x16a4 <L_5390+0x8c2>
    1394:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1398:	84 e0       	ldi	r24, 0x04	; 4
    139a:	9c cf       	rjmp	.-200    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:309
			else						{iFrame++;}		
		}
		//Fade Green out
		else if(xFrame == 3)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, 255, 255);
    139c:	14 ae       	std	Z+60, r1	; 0x3c
    139e:	95 af       	std	Z+61, r25	; 0x3d
    13a0:	96 af       	std	Z+62, r25	; 0x3e
    13a2:	81 50       	subi	r24, 0x01	; 1
    13a4:	d6 cf       	rjmp	.-84     	; 0x1352 <L_5390+0x570>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:318
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Turn off green
		else if(xFrame == 4)	{
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	69 f5       	brne	.+90     	; 0x1404 <L_5390+0x622>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:319
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    13aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    13ae:	d1 01       	movw	r26, r2
    13b0:	a8 1b       	sub	r26, r24
    13b2:	b1 09       	sbc	r27, r1
    13b4:	ae 53       	subi	r26, 0x3E	; 62
    13b6:	bf 4f       	sbci	r27, 0xFF	; 255
    13b8:	e7 ed       	ldi	r30, 0xD7	; 215
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:320
				leds[iLed] = CRGB(0, Vect[iLed - iFrame], 255);
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:319
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Turn off green
		else if(xFrame == 4)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    13c2:	89 17       	cp	r24, r25
    13c4:	c8 f0       	brcs	.+50     	; 0x13f8 <L_5390+0x616>
    13c6:	98 2f       	mov	r25, r24
    13c8:	84 31       	cpi	r24, 0x14	; 20
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <L_5390+0x5ec>
    13cc:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:323
				leds[iLed] = CRGB(0, Vect[iLed - iFrame], 255);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(0, 0, 255);
    13ce:	33 e0       	ldi	r19, 0x03	; 3
    13d0:	2f ef       	ldi	r18, 0xFF	; 255
    13d2:	93 9f       	mul	r25, r19
    13d4:	f0 01       	movw	r30, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	e9 52       	subi	r30, 0x29	; 41
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	10 82       	st	Z, r1
    13de:	11 82       	std	Z+1, r1	; 0x01
    13e0:	22 83       	std	Z+2, r18	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:322
		//Turn off green
		else if(xFrame == 4)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, Vect[iLed - iFrame], 255);
			}
			for (;iLed != 255; iLed--) {
    13e2:	91 50       	subi	r25, 0x01	; 1
    13e4:	b0 f7       	brcc	.-20     	; 0x13d2 <L_5390+0x5f0>
    13e6:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:325
				leds[iLed] = CRGB(0, 0, 255);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    13ea:	83 31       	cpi	r24, 0x13	; 19
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <L_5390+0x60e>
    13ee:	13 cf       	rjmp	.-474    	; 0x1216 <L_5390+0x434>
    13f0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    13f4:	85 e0       	ldi	r24, 0x05	; 5
    13f6:	6e cf       	rjmp	.-292    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:320
			else						{iFrame++;}		
		}
		//Turn off green
		else if(xFrame == 4)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0, Vect[iLed - iFrame], 255);
    13f8:	3e 91       	ld	r19, -X
    13fa:	14 ae       	std	Z+60, r1	; 0x3c
    13fc:	35 af       	std	Z+61, r19	; 0x3d
    13fe:	26 af       	std	Z+62, r18	; 0x3e
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	de cf       	rjmp	.-68     	; 0x13c0 <L_5390+0x5de>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:329
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}	
		//Fade red
		else if(xFrame == 5)	{
    1404:	85 30       	cpi	r24, 0x05	; 5
    1406:	79 f5       	brne	.+94     	; 0x1466 <L_5390+0x684>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:330
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1408:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    140c:	e7 ed       	ldi	r30, 0xD7	; 215
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:331
				leds[iLed] = CRGB(0,0,255);
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:330
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}	
		//Fade red
		else if(xFrame == 5)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1416:	28 17       	cp	r18, r24
    1418:	08 f1       	brcs	.+66     	; 0x145c <L_5390+0x67a>
    141a:	32 2f       	mov	r19, r18
    141c:	24 31       	cpi	r18, 0x14	; 20
    141e:	08 f0       	brcs	.+2      	; 0x1422 <L_5390+0x640>
    1420:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:334
				leds[iLed] = CRGB(0,0,255);
			}		
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(Vect[iFrame - iLed], 0, 255);
    1422:	53 e0       	ldi	r21, 0x03	; 3
    1424:	82 2f       	mov	r24, r18
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	4f ef       	ldi	r20, 0xFF	; 255
    142a:	35 9f       	mul	r19, r21
    142c:	f0 01       	movw	r30, r0
    142e:	11 24       	eor	r1, r1
    1430:	e9 52       	subi	r30, 0x29	; 41
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	dc 01       	movw	r26, r24
    1436:	a3 1b       	sub	r26, r19
    1438:	b1 09       	sbc	r27, r1
    143a:	ae 53       	subi	r26, 0x3E	; 62
    143c:	bf 4f       	sbci	r27, 0xFF	; 255
    143e:	6c 91       	ld	r22, X
    1440:	60 83       	st	Z, r22
    1442:	11 82       	std	Z+1, r1	; 0x01
    1444:	42 83       	std	Z+2, r20	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:333
		//Fade red
		else if(xFrame == 5)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0,0,255);
			}		
			for (;iLed != 255; iLed--) {
    1446:	31 50       	subi	r19, 0x01	; 1
    1448:	80 f7       	brcc	.-32     	; 0x142a <L_5390+0x648>
    144a:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:336
				leds[iLed] = CRGB(Vect[iFrame - iLed], 0, 255);
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    144e:	23 31       	cpi	r18, 0x13	; 19
    1450:	09 f0       	breq	.+2      	; 0x1454 <L_5390+0x672>
    1452:	28 c1       	rjmp	.+592    	; 0x16a4 <L_5390+0x8c2>
    1454:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	3c cf       	rjmp	.-392    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:331
			else						{iFrame++;}		
		}	
		//Fade red
		else if(xFrame == 5)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(0,0,255);
    145c:	14 ae       	std	Z+60, r1	; 0x3c
    145e:	15 ae       	std	Z+61, r1	; 0x3d
    1460:	96 af       	std	Z+62, r25	; 0x3e
    1462:	81 50       	subi	r24, 0x01	; 1
    1464:	d7 cf       	rjmp	.-82     	; 0x1414 <L_5390+0x632>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:340
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fill red
		else if(xFrame == 6)	{
    1466:	86 30       	cpi	r24, 0x06	; 6
    1468:	61 f5       	brne	.+88     	; 0x14c2 <L_5390+0x6e0>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:341
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    146a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    146e:	a8 2f       	mov	r26, r24
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ae 53       	subi	r26, 0x3E	; 62
    1474:	bf 4f       	sbci	r27, 0xFF	; 255
    1476:	e7 ed       	ldi	r30, 0xD7	; 215
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:342
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iLed + iFrame], 0, 255);
    147c:	2f ef       	ldi	r18, 0xFF	; 255
    147e:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:341
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fill red
		else if(xFrame == 6)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1480:	89 17       	cp	r24, r25
    1482:	c8 f0       	brcs	.+50     	; 0x14b6 <L_5390+0x6d4>
    1484:	98 2f       	mov	r25, r24
    1486:	84 31       	cpi	r24, 0x14	; 20
    1488:	08 f0       	brcs	.+2      	; 0x148c <L_5390+0x6aa>
    148a:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:345
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iLed + iFrame], 0, 255);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(255, 0, 255);
    148c:	33 e0       	ldi	r19, 0x03	; 3
    148e:	2f ef       	ldi	r18, 0xFF	; 255
    1490:	93 9f       	mul	r25, r19
    1492:	f0 01       	movw	r30, r0
    1494:	11 24       	eor	r1, r1
    1496:	e9 52       	subi	r30, 0x29	; 41
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	20 83       	st	Z, r18
    149c:	11 82       	std	Z+1, r1	; 0x01
    149e:	22 83       	std	Z+2, r18	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:344
		//Fill red
		else if(xFrame == 6)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iLed + iFrame], 0, 255);
			}
			for (;iLed != 255; iLed--) {
    14a0:	91 50       	subi	r25, 0x01	; 1
    14a2:	b0 f7       	brcc	.-20     	; 0x1490 <L_5390+0x6ae>
    14a4:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:347
				leds[iLed] = CRGB(255, 0, 255);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    14a8:	83 31       	cpi	r24, 0x13	; 19
    14aa:	09 f0       	breq	.+2      	; 0x14ae <L_5390+0x6cc>
    14ac:	b4 ce       	rjmp	.-664    	; 0x1216 <L_5390+0x434>
    14ae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    14b2:	87 e0       	ldi	r24, 0x07	; 7
    14b4:	0f cf       	rjmp	.-482    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:342
			else						{iFrame++;}		
		}
		//Fill red
		else if(xFrame == 6)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iLed + iFrame], 0, 255);
    14b6:	3d 91       	ld	r19, X+
    14b8:	34 af       	std	Z+60, r19	; 0x3c
    14ba:	15 ae       	std	Z+61, r1	; 0x3d
    14bc:	26 af       	std	Z+62, r18	; 0x3e
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	de cf       	rjmp	.-68     	; 0x147e <L_5390+0x69c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:351
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade blue out		
		else if(xFrame == 7)	{
    14c2:	87 30       	cpi	r24, 0x07	; 7
    14c4:	81 f5       	brne	.+96     	; 0x1526 <L_5390+0x744>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:352
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    14c6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    14ca:	e7 ed       	ldi	r30, 0xD7	; 215
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:353
				leds[iLed] = CRGB(255, 0, 255);
    14d0:	9f ef       	ldi	r25, 0xFF	; 255
    14d2:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:352
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade blue out		
		else if(xFrame == 7)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    14d4:	28 17       	cp	r18, r24
    14d6:	10 f1       	brcs	.+68     	; 0x151c <L_5390+0x73a>
    14d8:	32 2f       	mov	r19, r18
    14da:	24 31       	cpi	r18, 0x14	; 20
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <L_5390+0x6fe>
    14de:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:356
				leds[iLed] = CRGB(255, 0, 255);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(255, 0, Vect[NUM_LEDS - 1 - iFrame + iLed]);
    14e0:	c4 01       	movw	r24, r8
    14e2:	82 1b       	sub	r24, r18
    14e4:	91 09       	sbc	r25, r1
    14e6:	8e 53       	subi	r24, 0x3E	; 62
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	53 e0       	ldi	r21, 0x03	; 3
    14ec:	4f ef       	ldi	r20, 0xFF	; 255
    14ee:	fc 01       	movw	r30, r24
    14f0:	e3 0f       	add	r30, r19
    14f2:	f1 1d       	adc	r31, r1
    14f4:	60 81       	ld	r22, Z
    14f6:	35 9f       	mul	r19, r21
    14f8:	f0 01       	movw	r30, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	e9 52       	subi	r30, 0x29	; 41
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	40 83       	st	Z, r20
    1502:	11 82       	std	Z+1, r1	; 0x01
    1504:	62 83       	std	Z+2, r22	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:355
		//Fade blue out		
		else if(xFrame == 7)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 0, 255);
			}
			for (;iLed != 255; iLed--) {
    1506:	31 50       	subi	r19, 0x01	; 1
    1508:	90 f7       	brcc	.-28     	; 0x14ee <L_5390+0x70c>
    150a:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:358
				leds[iLed] = CRGB(255, 0, Vect[NUM_LEDS - 1 - iFrame + iLed]);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    150e:	23 31       	cpi	r18, 0x13	; 19
    1510:	09 f0       	breq	.+2      	; 0x1514 <L_5390+0x732>
    1512:	c8 c0       	rjmp	.+400    	; 0x16a4 <L_5390+0x8c2>
    1514:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	dc ce       	rjmp	.-584    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:353
			else						{iFrame++;}		
		}
		//Fade blue out		
		else if(xFrame == 7)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 0, 255);
    151c:	94 af       	std	Z+60, r25	; 0x3c
    151e:	15 ae       	std	Z+61, r1	; 0x3d
    1520:	96 af       	std	Z+62, r25	; 0x3e
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	d6 cf       	rjmp	.-84     	; 0x14d2 <L_5390+0x6f0>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:362
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Turn off blue
		else if(xFrame == 8)	{
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	69 f5       	brne	.+90     	; 0x1584 <L_5390+0x7a2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:363
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    152a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    152e:	d1 01       	movw	r26, r2
    1530:	a8 1b       	sub	r26, r24
    1532:	b1 09       	sbc	r27, r1
    1534:	ae 53       	subi	r26, 0x3E	; 62
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	e7 ed       	ldi	r30, 0xD7	; 215
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:364
				leds[iLed] = CRGB(255, 0, Vect[iLed - iFrame]);
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:363
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Turn off blue
		else if(xFrame == 8)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1542:	89 17       	cp	r24, r25
    1544:	c8 f0       	brcs	.+50     	; 0x1578 <L_5390+0x796>
    1546:	98 2f       	mov	r25, r24
    1548:	84 31       	cpi	r24, 0x14	; 20
    154a:	08 f0       	brcs	.+2      	; 0x154e <L_5390+0x76c>
    154c:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:367
				leds[iLed] = CRGB(255, 0, Vect[iLed - iFrame]);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(255, 0, 0);
    154e:	33 e0       	ldi	r19, 0x03	; 3
    1550:	2f ef       	ldi	r18, 0xFF	; 255
    1552:	93 9f       	mul	r25, r19
    1554:	f0 01       	movw	r30, r0
    1556:	11 24       	eor	r1, r1
    1558:	e9 52       	subi	r30, 0x29	; 41
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	20 83       	st	Z, r18
    155e:	11 82       	std	Z+1, r1	; 0x01
    1560:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:366
		//Turn off blue
		else if(xFrame == 8)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 0, Vect[iLed - iFrame]);
			}
			for (;iLed != 255; iLed--) {
    1562:	91 50       	subi	r25, 0x01	; 1
    1564:	b0 f7       	brcc	.-20     	; 0x1552 <L_5390+0x770>
    1566:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:369
				leds[iLed] = CRGB(255, 0, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    156a:	83 31       	cpi	r24, 0x13	; 19
    156c:	09 f0       	breq	.+2      	; 0x1570 <L_5390+0x78e>
    156e:	53 ce       	rjmp	.-858    	; 0x1216 <L_5390+0x434>
    1570:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	ae ce       	rjmp	.-676    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:364
			else						{iFrame++;}		
		}
		//Turn off blue
		else if(xFrame == 8)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 0, Vect[iLed - iFrame]);
    1578:	2e 91       	ld	r18, -X
    157a:	34 af       	std	Z+60, r19	; 0x3c
    157c:	15 ae       	std	Z+61, r1	; 0x3d
    157e:	26 af       	std	Z+62, r18	; 0x3e
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	de cf       	rjmp	.-68     	; 0x1540 <L_5390+0x75e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:373
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}		
		//Fade in Green
		else if(xFrame == 9)	{
    1584:	89 30       	cpi	r24, 0x09	; 9
    1586:	79 f5       	brne	.+94     	; 0x15e6 <L_5390+0x804>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:374
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1588:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    158c:	e7 ed       	ldi	r30, 0xD7	; 215
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:375
				leds[iLed] = CRGB(255,0,0);
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:374
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}		
		//Fade in Green
		else if(xFrame == 9)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1596:	28 17       	cp	r18, r24
    1598:	08 f1       	brcs	.+66     	; 0x15dc <L_5390+0x7fa>
    159a:	32 2f       	mov	r19, r18
    159c:	24 31       	cpi	r18, 0x14	; 20
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <L_5390+0x7c0>
    15a0:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:378
				leds[iLed] = CRGB(255,0,0);
			}		
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(255,Vect[iFrame - iLed], 0);
    15a2:	82 2f       	mov	r24, r18
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	53 e0       	ldi	r21, 0x03	; 3
    15a8:	4f ef       	ldi	r20, 0xFF	; 255
    15aa:	fc 01       	movw	r30, r24
    15ac:	e3 1b       	sub	r30, r19
    15ae:	f1 09       	sbc	r31, r1
    15b0:	ee 53       	subi	r30, 0x3E	; 62
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	35 9f       	mul	r19, r21
    15b8:	f0 01       	movw	r30, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	e9 52       	subi	r30, 0x29	; 41
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	40 83       	st	Z, r20
    15c2:	61 83       	std	Z+1, r22	; 0x01
    15c4:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:377
		//Fade in Green
		else if(xFrame == 9)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255,0,0);
			}		
			for (;iLed != 255; iLed--) {
    15c6:	31 50       	subi	r19, 0x01	; 1
    15c8:	80 f7       	brcc	.-32     	; 0x15aa <L_5390+0x7c8>
    15ca:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:380
				leds[iLed] = CRGB(255,Vect[iFrame - iLed], 0);
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    15ce:	23 31       	cpi	r18, 0x13	; 19
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <L_5390+0x7f2>
    15d2:	68 c0       	rjmp	.+208    	; 0x16a4 <L_5390+0x8c2>
    15d4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    15d8:	8a e0       	ldi	r24, 0x0A	; 10
    15da:	7c ce       	rjmp	.-776    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:375
			else						{iFrame++;}		
		}		
		//Fade in Green
		else if(xFrame == 9)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255,0,0);
    15dc:	94 af       	std	Z+60, r25	; 0x3c
    15de:	15 ae       	std	Z+61, r1	; 0x3d
    15e0:	16 ae       	std	Z+62, r1	; 0x3e
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	d7 cf       	rjmp	.-82     	; 0x1594 <L_5390+0x7b2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:384
			}			
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}			
		}		
		//Fill green
		else if(xFrame == 10)	{
    15e6:	8a 30       	cpi	r24, 0x0A	; 10
    15e8:	61 f5       	brne	.+88     	; 0x1642 <L_5390+0x860>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:385
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    15ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    15ee:	a8 2f       	mov	r26, r24
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ae 53       	subi	r26, 0x3E	; 62
    15f4:	bf 4f       	sbci	r27, 0xFF	; 255
    15f6:	e7 ed       	ldi	r30, 0xD7	; 215
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:386
				leds[iLed] = CRGB(255,Vect[NUM_LEDS - 1 - iLed + iFrame], 0);
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:385
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}			
		}		
		//Fill green
		else if(xFrame == 10)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1600:	89 17       	cp	r24, r25
    1602:	c8 f0       	brcs	.+50     	; 0x1636 <L_5390+0x854>
    1604:	98 2f       	mov	r25, r24
    1606:	84 31       	cpi	r24, 0x14	; 20
    1608:	08 f0       	brcs	.+2      	; 0x160c <L_5390+0x82a>
    160a:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:389
				leds[iLed] = CRGB(255,Vect[NUM_LEDS - 1 - iLed + iFrame], 0);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(255, 255, 0);
    160c:	33 e0       	ldi	r19, 0x03	; 3
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	93 9f       	mul	r25, r19
    1612:	f0 01       	movw	r30, r0
    1614:	11 24       	eor	r1, r1
    1616:	e9 52       	subi	r30, 0x29	; 41
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	20 83       	st	Z, r18
    161c:	21 83       	std	Z+1, r18	; 0x01
    161e:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:388
		//Fill green
		else if(xFrame == 10)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255,Vect[NUM_LEDS - 1 - iLed + iFrame], 0);
			}
			for (;iLed != 255; iLed--) {
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	b0 f7       	brcc	.-20     	; 0x1610 <L_5390+0x82e>
    1624:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:391
				leds[iLed] = CRGB(255, 255, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    1628:	83 31       	cpi	r24, 0x13	; 19
    162a:	09 f0       	breq	.+2      	; 0x162e <L_5390+0x84c>
    162c:	f4 cd       	rjmp	.-1048   	; 0x1216 <L_5390+0x434>
    162e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1632:	8b e0       	ldi	r24, 0x0B	; 11
    1634:	4f ce       	rjmp	.-866    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:386
			else						{iFrame++;}			
		}		
		//Fill green
		else if(xFrame == 10)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255,Vect[NUM_LEDS - 1 - iLed + iFrame], 0);
    1636:	2d 91       	ld	r18, X+
    1638:	34 af       	std	Z+60, r19	; 0x3c
    163a:	25 af       	std	Z+61, r18	; 0x3d
    163c:	16 ae       	std	Z+62, r1	; 0x3e
    163e:	91 50       	subi	r25, 0x01	; 1
    1640:	de cf       	rjmp	.-68     	; 0x15fe <L_5390+0x81c>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:395
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade red out		
		else if(xFrame == 11)	{
    1642:	8b 30       	cpi	r24, 0x0B	; 11
    1644:	99 f5       	brne	.+102    	; 0x16ac <L_5390+0x8ca>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:396
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1646:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <iFrame>
    164a:	e7 ed       	ldi	r30, 0xD7	; 215
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	83 e1       	ldi	r24, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:397
				leds[iLed] = CRGB(255, 255, 0);
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:396
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Fade red out		
		else if(xFrame == 11)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    1654:	28 17       	cp	r18, r24
    1656:	08 f1       	brcs	.+66     	; 0x169a <L_5390+0x8b8>
    1658:	32 2f       	mov	r19, r18
    165a:	24 31       	cpi	r18, 0x14	; 20
    165c:	08 f0       	brcs	.+2      	; 0x1660 <L_5390+0x87e>
    165e:	33 e1       	ldi	r19, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:400
				leds[iLed] = CRGB(255, 255, 0);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iFrame + iLed], 255, 0);
    1660:	43 e0       	ldi	r20, 0x03	; 3
    1662:	c4 01       	movw	r24, r8
    1664:	82 1b       	sub	r24, r18
    1666:	91 09       	sbc	r25, r1
    1668:	8e 53       	subi	r24, 0x3E	; 62
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	5f ef       	ldi	r21, 0xFF	; 255
    166e:	34 9f       	mul	r19, r20
    1670:	f0 01       	movw	r30, r0
    1672:	11 24       	eor	r1, r1
    1674:	e9 52       	subi	r30, 0x29	; 41
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	dc 01       	movw	r26, r24
    167a:	a3 0f       	add	r26, r19
    167c:	b1 1d       	adc	r27, r1
    167e:	6c 91       	ld	r22, X
    1680:	60 83       	st	Z, r22
    1682:	51 83       	std	Z+1, r21	; 0x01
    1684:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:399
		//Fade red out		
		else if(xFrame == 11)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 255, 0);
			}
			for (;iLed != 255; iLed--) {
    1686:	31 50       	subi	r19, 0x01	; 1
    1688:	90 f7       	brcc	.-28     	; 0x166e <L_5390+0x88c>
    168a:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:402
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iFrame + iLed], 255, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
    168e:	23 31       	cpi	r18, 0x13	; 19
    1690:	49 f4       	brne	.+18     	; 0x16a4 <L_5390+0x8c2>
    1692:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    1696:	8c e0       	ldi	r24, 0x0C	; 12
    1698:	1d ce       	rjmp	.-966    	; 0x12d4 <L_5390+0x4f2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:397
			else						{iFrame++;}		
		}
		//Fade red out		
		else if(xFrame == 11)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(255, 255, 0);
    169a:	94 af       	std	Z+60, r25	; 0x3c
    169c:	95 af       	std	Z+61, r25	; 0x3d
    169e:	16 ae       	std	Z+62, r1	; 0x3e
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	d7 cf       	rjmp	.-82     	; 0x1652 <L_5390+0x870>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:403
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(Vect[NUM_LEDS - 1 - iFrame + iLed], 255, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
    16a4:	2f 5f       	subi	r18, 0xFF	; 255
    16a6:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <iFrame>
    16aa:	1d cc       	rjmp	.-1990   	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:406
		}
		//Turn off red
		else if(xFrame == 12)	{
    16ac:	8c 30       	cpi	r24, 0x0C	; 12
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <L_5390+0x8d0>
    16b0:	1a cc       	rjmp	.-1996   	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:407
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    16b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    16b6:	d1 01       	movw	r26, r2
    16b8:	a8 1b       	sub	r26, r24
    16ba:	b1 09       	sbc	r27, r1
    16bc:	ae 53       	subi	r26, 0x3E	; 62
    16be:	bf 4f       	sbci	r27, 0xFF	; 255
    16c0:	e7 ed       	ldi	r30, 0xD7	; 215
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:408
				leds[iLed] = CRGB(Vect[iLed - iFrame], 255, 0);
    16c6:	2f ef       	ldi	r18, 0xFF	; 255
    16c8:	33 97       	sbiw	r30, 0x03	; 3
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:407
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame++;}
			else						{iFrame++;}		
		}
		//Turn off red
		else if(xFrame == 12)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
    16ca:	89 17       	cp	r24, r25
    16cc:	d0 f0       	brcs	.+52     	; 0x1702 <L_5390+0x920>
    16ce:	98 2f       	mov	r25, r24
    16d0:	84 31       	cpi	r24, 0x14	; 20
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <L_5390+0x8f4>
    16d4:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:411
				leds[iLed] = CRGB(Vect[iLed - iFrame], 255, 0);
			}
			for (;iLed != 255; iLed--) {
				leds[iLed] = CRGB(0, 255, 0);
    16d6:	33 e0       	ldi	r19, 0x03	; 3
    16d8:	2f ef       	ldi	r18, 0xFF	; 255
    16da:	93 9f       	mul	r25, r19
    16dc:	f0 01       	movw	r30, r0
    16de:	11 24       	eor	r1, r1
    16e0:	e9 52       	subi	r30, 0x29	; 41
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	10 82       	st	Z, r1
    16e6:	21 83       	std	Z+1, r18	; 0x01
    16e8:	12 82       	std	Z+2, r1	; 0x02
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:410
		//Turn off red
		else if(xFrame == 12)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(Vect[iLed - iFrame], 255, 0);
			}
			for (;iLed != 255; iLed--) {
    16ea:	91 50       	subi	r25, 0x01	; 1
    16ec:	b0 f7       	brcc	.-20     	; 0x16da <L_5390+0x8f8>
    16ee:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:413
				leds[iLed] = CRGB(0, 255, 0);
			}
			if(iFrame == NUM_LEDS-1)	{iFrame = 0; xFrame = 1;}
    16f2:	83 31       	cpi	r24, 0x13	; 19
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <L_5390+0x916>
    16f6:	8f cd       	rjmp	.-1250   	; 0x1216 <L_5390+0x434>
    16f8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
    16fc:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <xFrame>
    1700:	f2 cb       	rjmp	.-2076   	; 0xee6 <L_5390+0x104>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:408
			else						{iFrame++;}		
		}
		//Turn off red
		else if(xFrame == 12)	{
			for (iLed = NUM_LEDS-1; iLed > iFrame; iLed--) {
				leds[iLed] = CRGB(Vect[iLed - iFrame], 255, 0);
    1702:	3e 91       	ld	r19, -X
    1704:	34 af       	std	Z+60, r19	; 0x3c
    1706:	25 af       	std	Z+61, r18	; 0x3d
    1708:	16 ae       	std	Z+62, r1	; 0x3e
    170a:	91 50       	subi	r25, 0x01	; 1
    170c:	dd cf       	rjmp	.-70     	; 0x16c8 <L_5390+0x8e6>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:422
		FastLED.show();
		FrameDelay = 15;
  	}

  	//////////////////// STATUS 17 ///////////////////////
  	else if(Status == 17)  {
    170e:	81 31       	cpi	r24, 0x11	; 17
    1710:	71 f5       	brne	.+92     	; 0x176e <L_5390+0x98c>
    1712:	e2 ec       	ldi	r30, 0xC2	; 194
    1714:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:423
		for (iLed=0; 			iLed<NUM_LEDS; 		iLed++)	{ Vect[iLed] = 0; }
    1716:	85 e1       	ldi	r24, 0x15	; 21
    1718:	81 50       	subi	r24, 0x01	; 1
    171a:	11 f0       	breq	.+4      	; 0x1720 <L_5390+0x93e>
    171c:	11 92       	st	Z+, r1
    171e:	fc cf       	rjmp	.-8      	; 0x1718 <L_5390+0x936>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:424
		for (iLed=0; 			iLed<NUM_LEDS/4; 	iLed++) { Vect[iLed] = 255; }
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Vect>
    1726:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Vect+0x1>
    172a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Vect+0x2>
    172e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <Vect+0x3>
    1732:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Vect+0x4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:425
		for (iLed=NUM_LEDS/2; 	iLed<NUM_LEDS*3/4;	iLed++) { Vect[iLed] = 255; }
    1736:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Vect+0xa>
    173a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Vect+0xb>
    173e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <Vect+0xc>
    1742:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Vect+0xd>
    1746:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <Vect+0xe>
    174a:	8f e0       	ldi	r24, 0x0F	; 15
    174c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:426
		ShiftLed(GreenDD);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	40 d9       	rcall	.-3456   	; 0x9d4 <ShiftLed(unsigned char)>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:427
		if(iFrame) {
    1754:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <iFrame>
    1758:	88 23       	and	r24, r24
    175a:	29 f0       	breq	.+10     	; 0x1766 <L_5390+0x984>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:428
			iFrame = 0;
    175c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <iFrame>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:433
		}
		else{
			iFrame += NUM_LEDS/4;
		}
		FastLED.show();
    1760:	12 d5       	rcall	.+2596   	; 0x2186 <__TEXT_REGION_LENGTH__+0x186>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:434
		FrameDelay = 80;
    1762:	80 e5       	ldi	r24, 0x50	; 80
    1764:	b9 ca       	rjmp	.-2702   	; 0xcd8 <main+0x1d4>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:431
		ShiftLed(GreenDD);
		if(iFrame) {
			iFrame = 0;
		}
		else{
			iFrame += NUM_LEDS/4;
    1766:	85 e0       	ldi	r24, 0x05	; 5
    1768:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <iFrame>
    176c:	f9 cf       	rjmp	.-14     	; 0x1760 <L_5390+0x97e>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:437
		}
		FastLED.show();
		FrameDelay = 80;
  	}
  	//////////////////// STATUS 18 ///////////////////////
  	else if(Status == 18)  {
    176e:	82 31       	cpi	r24, 0x12	; 18
    1770:	d9 f4       	brne	.+54     	; 0x17a8 <L_5390+0x9c6>
    1772:	e2 ec       	ldi	r30, 0xC2	; 194
    1774:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:438
		for (iLed=0; iLed<NUM_LEDS; iLed++) { Vect[iLed] = 0; }
    1776:	85 e1       	ldi	r24, 0x15	; 21
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	11 f0       	breq	.+4      	; 0x1780 <L_5390+0x99e>
    177c:	11 92       	st	Z+, r1
    177e:	fc cf       	rjmp	.-8      	; 0x1778 <L_5390+0x996>
    1780:	d0 93 d6 00 	sts	0x00D6, r29	; 0x8000d6 <iLed>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:439
		Vect[0] = 255;
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Vect>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:440
		Vect[1] = 255;
    178a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Vect+0x1>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:441
		Vect[2] = 255;
    178e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Vect+0x2>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:442
		Vect[3] = 255;
    1792:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <Vect+0x3>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:443
		Vect[NUM_LEDS/2] = 255;
    1796:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Vect+0xa>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:444
		Vect[NUM_LEDS/2 + 1] = 255;
    179a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Vect+0xb>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:445
		Vect[NUM_LEDS/2 + 2] = 255;
    179e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <Vect+0xc>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:446
		Vect[NUM_LEDS/2 + 3] = 255;
    17a2:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Vect+0xd>
    17a6:	30 cd       	rjmp	.-1440   	; 0x1208 <L_5390+0x426>
C:\Users\user\Desktop\LedDriver\LedDriver2/LedDriver2.ino:455
		FastLED.show();
		FrameDelay = 15;
  	}
	//////////////////// STATUS OTHERS ///////////////////////
	else	{
		Status = 0;
    17a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    17ac:	97 ca       	rjmp	.-2770   	; 0xcdc <main+0x1d8>

000017ae <_GLOBAL__sub_I_pSmartMatrix>:
_GLOBAL__sub_I_pSmartMatrix():
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:36
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    17ae:	e9 e2       	ldi	r30, 0x29	; 41
    17b0:	f1 e0       	ldi	r31, 0x01	; 1
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	80 83       	st	Z, r24
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:37
	m_nFPS = 0;
    17b6:	12 82       	std	Z+2, r1	; 0x02
    17b8:	11 82       	std	Z+1, r1	; 0x01
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:38
	m_pPowerFunc = NULL;
    17ba:	14 86       	std	Z+12, r1	; 0x0c
    17bc:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:39
	m_nPowerData = 0xFFFFFFFF;
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f ef       	ldi	r25, 0xFF	; 255
    17c2:	dc 01       	movw	r26, r24
    17c4:	87 83       	std	Z+7, r24	; 0x07
    17c6:	90 87       	std	Z+8, r25	; 0x08
    17c8:	a1 87       	std	Z+9, r26	; 0x09
    17ca:	b2 87       	std	Z+10, r27	; 0x0a
C:\Users\user\Documents\Arduino\libraries\FastLED\src/FastLED.cpp:254
}

/// Called at program exit when run in a desktop environment. 
/// Extra C definition that some environments may need. 
/// @returns 0 to indicate success
extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    17cc:	08 95       	ret

000017ce <random_r>:
random_r():
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	68 81       	ld	r22, Y
    17e6:	79 81       	ldd	r23, Y+1	; 0x01
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	81 05       	cpc	r24, r1
    17f2:	91 05       	cpc	r25, r1
    17f4:	21 f4       	brne	.+8      	; 0x17fe <random_r+0x30>
    17f6:	64 e2       	ldi	r22, 0x24	; 36
    17f8:	79 ed       	ldi	r23, 0xD9	; 217
    17fa:	8b e5       	ldi	r24, 0x5B	; 91
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	2d e1       	ldi	r18, 0x1D	; 29
    1800:	33 ef       	ldi	r19, 0xF3	; 243
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	81 d0       	rcall	.+258    	; 0x190a <__divmodsi4>
    1808:	49 01       	movw	r8, r18
    180a:	5a 01       	movw	r10, r20
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	a7 ea       	ldi	r26, 0xA7	; 167
    1812:	b1 e4       	ldi	r27, 0x41	; 65
    1814:	96 d0       	rcall	.+300    	; 0x1942 <__muluhisi3>
    1816:	6b 01       	movw	r12, r22
    1818:	7c 01       	movw	r14, r24
    181a:	ac ee       	ldi	r26, 0xEC	; 236
    181c:	b4 ef       	ldi	r27, 0xF4	; 244
    181e:	a5 01       	movw	r20, r10
    1820:	94 01       	movw	r18, r8
    1822:	9b d0       	rcall	.+310    	; 0x195a <__mulohisi3>
    1824:	c6 0e       	add	r12, r22
    1826:	d7 1e       	adc	r13, r23
    1828:	e8 1e       	adc	r14, r24
    182a:	f9 1e       	adc	r15, r25
    182c:	f7 fe       	sbrs	r15, 7
    182e:	06 c0       	rjmp	.+12     	; 0x183c <random_r+0x6e>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	c8 1a       	sub	r12, r24
    1834:	d1 08       	sbc	r13, r1
    1836:	e1 08       	sbc	r14, r1
    1838:	80 e8       	ldi	r24, 0x80	; 128
    183a:	f8 0a       	sbc	r15, r24
    183c:	c8 82       	st	Y, r12
    183e:	d9 82       	std	Y+1, r13	; 0x01
    1840:	ea 82       	std	Y+2, r14	; 0x02
    1842:	fb 82       	std	Y+3, r15	; 0x03
    1844:	c7 01       	movw	r24, r14
    1846:	b6 01       	movw	r22, r12
    1848:	9f 77       	andi	r25, 0x7F	; 127
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	08 95       	ret

00001860 <random>:
random():
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <next>
    1874:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <next+0x1>
    1878:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <next+0x2>
    187c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <next+0x3>
    1880:	61 15       	cp	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	81 05       	cpc	r24, r1
    1886:	91 05       	cpc	r25, r1
    1888:	21 f4       	brne	.+8      	; 0x1892 <random+0x32>
    188a:	64 e2       	ldi	r22, 0x24	; 36
    188c:	79 ed       	ldi	r23, 0xD9	; 217
    188e:	8b e5       	ldi	r24, 0x5B	; 91
    1890:	97 e0       	ldi	r25, 0x07	; 7
    1892:	2d e1       	ldi	r18, 0x1D	; 29
    1894:	33 ef       	ldi	r19, 0xF3	; 243
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	37 d0       	rcall	.+110    	; 0x190a <__divmodsi4>
    189c:	49 01       	movw	r8, r18
    189e:	5a 01       	movw	r10, r20
    18a0:	9b 01       	movw	r18, r22
    18a2:	ac 01       	movw	r20, r24
    18a4:	a7 ea       	ldi	r26, 0xA7	; 167
    18a6:	b1 e4       	ldi	r27, 0x41	; 65
    18a8:	4c d0       	rcall	.+152    	; 0x1942 <__muluhisi3>
    18aa:	6b 01       	movw	r12, r22
    18ac:	7c 01       	movw	r14, r24
    18ae:	ac ee       	ldi	r26, 0xEC	; 236
    18b0:	b4 ef       	ldi	r27, 0xF4	; 244
    18b2:	a5 01       	movw	r20, r10
    18b4:	94 01       	movw	r18, r8
    18b6:	51 d0       	rcall	.+162    	; 0x195a <__mulohisi3>
    18b8:	c6 0e       	add	r12, r22
    18ba:	d7 1e       	adc	r13, r23
    18bc:	e8 1e       	adc	r14, r24
    18be:	f9 1e       	adc	r15, r25
    18c0:	f7 fe       	sbrs	r15, 7
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <random+0x70>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	c8 1a       	sub	r12, r24
    18c8:	d1 08       	sbc	r13, r1
    18ca:	e1 08       	sbc	r14, r1
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	f8 0a       	sbc	r15, r24
    18d0:	c0 92 61 00 	sts	0x0061, r12	; 0x800061 <next>
    18d4:	d0 92 62 00 	sts	0x0062, r13	; 0x800062 <next+0x1>
    18d8:	e0 92 63 00 	sts	0x0063, r14	; 0x800063 <next+0x2>
    18dc:	f0 92 64 00 	sts	0x0064, r15	; 0x800064 <next+0x3>
    18e0:	c7 01       	movw	r24, r14
    18e2:	b6 01       	movw	r22, r12
    18e4:	9f 77       	andi	r25, 0x7F	; 127
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	08 95       	ret

000018f8 <srandom>:
srandom():
    18f8:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <next>
    18fc:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <next+0x1>
    1900:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <next+0x2>
    1904:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <next+0x3>
    1908:	08 95       	ret

0000190a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    190a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    190c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    190e:	16 f4       	brtc	.+4      	; 0x1914 <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    1910:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1912:	0f d0       	rcall	.+30     	; 0x1932 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1914:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1916:	05 d0       	rcall	.+10     	; 0x1922 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1918:	24 d0       	rcall	.+72     	; 0x1962 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    191a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    191c:	02 d0       	rcall	.+4      	; 0x1922 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    191e:	46 f4       	brtc	.+16     	; 0x1930 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <__negsi2>

00001922 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    1922:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1924:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1926:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    1928:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    192c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    192e:	5f 4f       	sbci	r21, 0xFF	; 255

00001930 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    1930:	08 95       	ret

00001932 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    1932:	90 95       	com	r25
    1934:	80 95       	com	r24
    1936:	70 95       	com	r23
    1938:	61 95       	neg	r22
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	8f 4f       	sbci	r24, 0xFF	; 255
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    1940:	08 95       	ret

00001942 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1942:	31 d0       	rcall	.+98     	; 0x19a6 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1944:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1946:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1948:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    194a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    194c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    194e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1950:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1952:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1954:	08 95       	ret

00001956 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1956:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1958:	f4 cf       	rjmp	.-24     	; 0x1942 <__muluhisi3>

0000195a <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    195a:	f3 df       	rcall	.-26     	; 0x1942 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    195c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    195e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1960:	08 95       	ret

00001962 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1962:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1964:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1966:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1968:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    196a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    196c:	0d c0       	rjmp	.+26     	; 0x1988 <__udivmodsi4_ep>

0000196e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    196e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1970:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1972:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1974:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1976:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1978:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    197a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    197c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    197e:	20 f0       	brcs	.+8      	; 0x1988 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1980:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1982:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1984:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1986:	f5 0b       	sbc	r31, r21

00001988 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1988:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    198a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    198c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    198e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1990:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1992:	69 f7       	brne	.-38     	; 0x196e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1994:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1996:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1998:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    199a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    199c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    199e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    19a0:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    19a2:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    19a4:	08 95       	ret

000019a6 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    19a6:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    19a8:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    19aa:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    19ac:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    19ae:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:578
    19b0:	01 d0       	rcall	.+2      	; 0x19b4 <__umulhisi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    19b2:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    19b4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    19b6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    19b8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    19ba:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    19bc:	08 95       	ret

000019be <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    19be:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    19c0:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    19c2:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    19c4:	be df       	rcall	.-132    	; 0x1942 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    19c6:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    19c8:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    19ca:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    19cc:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    19ce:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    19d0:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    19d2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    19d4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    19d6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    19d8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    19da:	08 95       	ret

000019dc <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    19dc:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    19de:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    19e0:	16 f4       	brtc	.+4      	; 0x19e6 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    19e2:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    19e4:	06 d0       	rcall	.+12     	; 0x19f2 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    19e6:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    19e8:	08 d0       	rcall	.+16     	; 0x19fa <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    19ea:	11 d0       	rcall	.+34     	; 0x1a0e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    19ec:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    19ee:	05 d0       	rcall	.+10     	; 0x19fa <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    19f0:	3e f4       	brtc	.+14     	; 0x1a00 <__divmodhi4_exit>

000019f2 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    19f2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    19f4:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    19f8:	08 95       	ret

000019fa <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    19fa:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    19fc:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001a00 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1a00:	08 95       	ret

00001a02 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    1a02:	d1 df       	rcall	.-94     	; 0x19a6 <__umulhisi3>

00001a04 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    1a04:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    1a06:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    1a08:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    1a0a:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    1a0c:	08 95       	ret

00001a0e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1a0e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1a10:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1a12:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <__udivmodhi4_ep>

00001a16 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1a16:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1a18:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1a1a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1a1c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1a1e:	10 f0       	brcs	.+4      	; 0x1a24 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1a20:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1a22:	b7 0b       	sbc	r27, r23

00001a24 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1a24:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1a26:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1a28:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1a2a:	a9 f7       	brne	.-22     	; 0x1a16 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1a2c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1a2e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1a30:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1a32:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1a34:	08 95       	ret

00001a36 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1a36:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1a38:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1a3a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1a3c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1a3e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1a40:	09 94       	ijmp

00001a42 <abort>:
abort():
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	f8 94       	cli
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <_exit>

00001a4a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1a4a:	f8 94       	cli

00001a4c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1a4c:	ff cf       	rjmp	.-2      	; 0x1a4c <__stop_program>
